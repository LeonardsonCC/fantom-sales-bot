/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type NftDetailsStruct = {
  nfts: string[];
  tokenIds: BigNumberish[];
  amountBatches: BigNumberish[];
  seller: string;
  price: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
  maxBidOrOffer: BigNumberish;
  maxBidderOrOfferer: string;
  isAuction: boolean;
  amount: BigNumberish;
  amountRemaining: BigNumberish;
  paymentToken: string;
  complete: boolean;
  devFeePercentage: BigNumberish;
};

export type NftDetailsStructOutput = [
  string[],
  BigNumber[],
  BigNumber[],
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  boolean,
  BigNumber,
  BigNumber,
  string,
  boolean,
  BigNumber
] & {
  nfts: string[];
  tokenIds: BigNumber[];
  amountBatches: BigNumber[];
  seller: string;
  price: BigNumber;
  startTime: BigNumber;
  endTime: BigNumber;
  maxBidOrOffer: BigNumber;
  maxBidderOrOfferer: string;
  isAuction: boolean;
  amount: BigNumber;
  amountRemaining: BigNumber;
  paymentToken: string;
  complete: boolean;
  devFeePercentage: BigNumber;
};

export interface PaintSwapInterface extends utils.Interface {
  functions: {
    "acceptBestOffer(uint256)": FunctionFragment;
    "acceptOfferAfterDeadlineEnabled()": FunctionFragment;
    "addSale(address[],uint256[],uint256[],uint128,uint256[],uint128,bool[],string,string,address[])": FunctionFragment;
    "addWhitelistedSellerBuyerContract(address)": FunctionFragment;
    "auctionEndTimeIncreaseCutOff()": FunctionFragment;
    "bundlesEnabled()": FunctionFragment;
    "buy(uint256,uint128,address)": FunctionFragment;
    "cancelCutoff()": FunctionFragment;
    "cancelSale(uint256)": FunctionFragment;
    "completeMarketplaceEntry(uint256)": FunctionFragment;
    "currentMarketplaceId()": FunctionFragment;
    "devFeeAddress()": FunctionFragment;
    "devFeePercentage()": FunctionFragment;
    "devSalesFeeAddress()": FunctionFragment;
    "editPrice(uint256,uint128)": FunctionFragment;
    "endTimeCutOff()": FunctionFragment;
    "excessNFTAmount(address,uint256)": FunctionFragment;
    "excessTokenAmount(address)": FunctionFragment;
    "getSaleDetails(uint256)": FunctionFragment;
    "isSellingEnabled()": FunctionFragment;
    "makeBid(uint256,uint128,address)": FunctionFragment;
    "makeOffer(uint256,uint128,address)": FunctionFragment;
    "marketplaceWhitelist()": FunctionFragment;
    "maxBundleNumber()": FunctionFragment;
    "maxDuration()": FunctionFragment;
    "maxStartTimeIncrement()": FunctionFragment;
    "minDuration()": FunctionFragment;
    "minIncreasedBidOfferPercent()": FunctionFragment;
    "modifyInitialStartTime()": FunctionFragment;
    "nextMinimumBidOrOffer(uint256)": FunctionFragment;
    "officialNFTDiscount()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "onlySellerAndHighestOfferCanEndSale()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeWhitelistedSellerBuyerContract(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyInfo()": FunctionFragment;
    "saleGracePeriodForCancelling()": FunctionFragment;
    "setAcceptOfferAfterDeadlineEnabled(bool)": FunctionFragment;
    "setAuctionEndTimeIncreaseCutOff(uint256)": FunctionFragment;
    "setBundlesSupported(bool)": FunctionFragment;
    "setCallGasLimit(uint256)": FunctionFragment;
    "setCancelCutoff(uint256)": FunctionFragment;
    "setDevAddress(address)": FunctionFragment;
    "setDevFeePercentage(uint16)": FunctionFragment;
    "setDevSalesAddress(address)": FunctionFragment;
    "setEnableSelling(bool)": FunctionFragment;
    "setEndTimeCutoff(uint256)": FunctionFragment;
    "setMaxBundleNumber(uint128)": FunctionFragment;
    "setMaxDuration(uint256)": FunctionFragment;
    "setMaxRoyalty(uint256)": FunctionFragment;
    "setMaxStartTimeIncrement(uint256)": FunctionFragment;
    "setMinIncreasedBidOfferPercent(uint128)": FunctionFragment;
    "setMinimumDuration(uint256)": FunctionFragment;
    "setModifyInitialStartTime(bool)": FunctionFragment;
    "setOfficialNFTDiscount(address)": FunctionFragment;
    "setOnlySellerAndHighestOfferCanEndSale(bool)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "setSaleGracePeriodForCancelling(uint256)": FunctionFragment;
    "setSlidingEndTimeForBidsEnabled(bool)": FunctionFragment;
    "slidingEndTimeForBidsEnabled()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokens()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelistedSellerBuyerContract(address)": FunctionFragment;
    "withdrawExcessNFTs(address,uint256)": FunctionFragment;
    "withdrawExcessTokens(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBestOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOfferAfterDeadlineEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSale",
    values: [
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      boolean[],
      string,
      string,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistedSellerBuyerContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionEndTimeIncreaseCutOff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bundlesEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCutoff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeMarketplaceEntry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentMarketplaceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devFeeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devSalesFeeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endTimeCutOff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excessNFTAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excessTokenAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSellingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeBid",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxBundleNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxStartTimeIncrement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minIncreasedBidOfferPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modifyInitialStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextMinimumBidOrOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "officialNFTDiscount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onlySellerAndHighestOfferCanEndSale",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedSellerBuyerContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleGracePeriodForCancelling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAcceptOfferAfterDeadlineEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionEndTimeIncreaseCutOff",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBundlesSupported",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCancelCutoff",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevSalesAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnableSelling",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndTimeCutoff",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBundleNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRoyalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStartTimeIncrement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinIncreasedBidOfferPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setModifyInitialStartTime",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOfficialNFTDiscount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOnlySellerAndHighestOfferCanEndSale",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSaleGracePeriodForCancelling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlidingEndTimeForBidsEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "slidingEndTimeForBidsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedSellerBuyerContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawExcessNFTs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawExcessTokens",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptBestOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOfferAfterDeadlineEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistedSellerBuyerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionEndTimeIncreaseCutOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bundlesEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelCutoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeMarketplaceEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMarketplaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devSalesFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endTimeCutOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excessNFTAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excessTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSellingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBundleNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxStartTimeIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minIncreasedBidOfferPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyInitialStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMinimumBidOrOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "officialNFTDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlySellerAndHighestOfferCanEndSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedSellerBuyerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleGracePeriodForCancelling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAcceptOfferAfterDeadlineEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionEndTimeIncreaseCutOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBundlesSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCallGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCancelCutoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevSalesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnableSelling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndTimeCutoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBundleNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStartTimeIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinIncreasedBidOfferPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setModifyInitialStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOfficialNFTDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOnlySellerAndHighestOfferCanEndSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSaleGracePeriodForCancelling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlidingEndTimeForBidsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slidingEndTimeForBidsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedSellerBuyerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExcessNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExcessTokens",
    data: BytesLike
  ): Result;

  events: {
    "CancelledSale(uint256,address[],uint256[],uint256[])": EventFragment;
    "NewBid(uint256,address,uint128,uint256)": EventFragment;
    "NewOffer(uint256,address,uint128,uint256)": EventFragment;
    "NewSale(uint256,address[],uint256[],uint256[],uint128,uint256,bool,uint256,bool,string,string,address[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SaleFinished(uint256,address[],uint256[],uint256[],bool)": EventFragment;
    "Sold(uint256,address[],uint256[],uint256[],uint128,address,address,uint256)": EventFragment;
    "UpdateEndTime(uint256,uint256)": EventFragment;
    "UpdatePrice(uint256,uint128,address[],uint256[])": EventFragment;
    "UpdateStartTime(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelledSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEndTime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateStartTime"): EventFragment;
}

export type CancelledSaleEvent = TypedEvent<
  [BigNumber, string[], BigNumber[], BigNumber[]],
  {
    marketplaceId: BigNumber;
    nfts: string[];
    tokenIds: BigNumber[];
    amountBatches: BigNumber[];
  }
>;

export type CancelledSaleEventFilter = TypedEventFilter<CancelledSaleEvent>;

export type NewBidEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    marketplaceId: BigNumber;
    bidder: string;
    bid: BigNumber;
    nextMinimum: BigNumber;
  }
>;

export type NewBidEventFilter = TypedEventFilter<NewBidEvent>;

export type NewOfferEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    marketplaceId: BigNumber;
    offerer: string;
    offer: BigNumber;
    nextMinimum: BigNumber;
  }
>;

export type NewOfferEventFilter = TypedEventFilter<NewOfferEvent>;

export type NewSaleEvent = TypedEvent<
  [
    BigNumber,
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    string,
    string,
    string[]
  ],
  {
    marketplaceId: BigNumber;
    nfts: string[];
    tokenIds: BigNumber[];
    amountBatches: BigNumber[];
    price: BigNumber;
    duration: BigNumber;
    isAuction: boolean;
    amount: BigNumber;
    isNSFW: boolean;
    marketplaceURI: string;
    searchKeywords: string;
    addresses: string[];
  }
>;

export type NewSaleEventFilter = TypedEventFilter<NewSaleEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SaleFinishedEvent = TypedEvent<
  [BigNumber, string[], BigNumber[], BigNumber[], boolean],
  {
    marketplaceId: BigNumber;
    nfts: string[];
    tokenIds: BigNumber[];
    amountBatches: BigNumber[];
    failedSellAll: boolean;
  }
>;

export type SaleFinishedEventFilter = TypedEventFilter<SaleFinishedEvent>;

export type SoldEvent = TypedEvent<
  [
    BigNumber,
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber,
    string,
    string,
    BigNumber
  ],
  {
    marketplaceId: BigNumber;
    nfts: string[];
    tokenIds: BigNumber[];
    amountBatches: BigNumber[];
    price: BigNumber;
    buyer: string;
    seller: string;
    amount: BigNumber;
  }
>;

export type SoldEventFilter = TypedEventFilter<SoldEvent>;

export type UpdateEndTimeEvent = TypedEvent<
  [BigNumber, BigNumber],
  { marketplaceId: BigNumber; endTime: BigNumber }
>;

export type UpdateEndTimeEventFilter = TypedEventFilter<UpdateEndTimeEvent>;

export type UpdatePriceEvent = TypedEvent<
  [BigNumber, BigNumber, string[], BigNumber[]],
  {
    marketplaceId: BigNumber;
    price: BigNumber;
    nfts: string[];
    tokenIds: BigNumber[];
  }
>;

export type UpdatePriceEventFilter = TypedEventFilter<UpdatePriceEvent>;

export type UpdateStartTimeEvent = TypedEvent<
  [BigNumber, BigNumber],
  { marketplaceId: BigNumber; startTime: BigNumber }
>;

export type UpdateStartTimeEventFilter = TypedEventFilter<UpdateStartTimeEvent>;

export interface PaintSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PaintSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptBestOffer(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptOfferAfterDeadlineEnabled(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addSale(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _amountBatches: BigNumberish[],
      _price: BigNumberish,
      _times: BigNumberish[],
      _amount: BigNumberish,
      _flags: boolean[],
      _marketplaceURI: string,
      _searchKeywords: string,
      _addresses: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWhitelistedSellerBuyerContract(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctionEndTimeIncreaseCutOff(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bundlesEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    buy(
      _marketplaceId: BigNumberish,
      _amount: BigNumberish,
      _buyer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelCutoff(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelSale(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeMarketplaceEntry(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentMarketplaceId(overrides?: CallOverrides): Promise<[BigNumber]>;

    devFeeAddress(overrides?: CallOverrides): Promise<[string]>;

    devFeePercentage(overrides?: CallOverrides): Promise<[number]>;

    devSalesFeeAddress(overrides?: CallOverrides): Promise<[string]>;

    editPrice(
      _marketplaceId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endTimeCutOff(overrides?: CallOverrides): Promise<[BigNumber]>;

    excessNFTAmount(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    excessTokenAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSaleDetails(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[NftDetailsStructOutput]>;

    isSellingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    makeBid(
      _marketplaceId: BigNumberish,
      _bid: BigNumberish,
      _buyer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeOffer(
      _marketplaceId: BigNumberish,
      _offer: BigNumberish,
      _buyer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketplaceWhitelist(overrides?: CallOverrides): Promise<[string]>;

    maxBundleNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxStartTimeIncrement(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    minIncreasedBidOfferPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    modifyInitialStartTime(overrides?: CallOverrides): Promise<[boolean]>;

    nextMinimumBidOrOffer(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    officialNFTDiscount(overrides?: CallOverrides): Promise<[string]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onlySellerAndHighestOfferCanEndSale(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeWhitelistedSellerBuyerContract(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & {
        maxRoyalty: BigNumber;
        collectionRoyalties: string;
      }
    >;

    saleGracePeriodForCancelling(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAcceptOfferAfterDeadlineEnabled(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionEndTimeIncreaseCutOff(
      _auctionEndTimeIncreaseCutOff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBundlesSupported(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCallGasLimit(
      _callGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCancelCutoff(
      _cancelCutoff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevAddress(
      _dev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevSalesAddress(
      _dev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnableSelling(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEndTimeCutoff(
      _endTimeCutoff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxBundleNumber(
      _maxBundleNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxDuration(
      _maxDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRoyalty(
      _maxRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxStartTimeIncrement(
      _maxStartTimeIncrement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinIncreasedBidOfferPercent(
      _minIncreasedBidOfferPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumDuration(
      _minDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setModifyInitialStartTime(
      _modifyInitialStartTime: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOfficialNFTDiscount(
      _officialNFTDiscount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOnlySellerAndHighestOfferCanEndSale(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      _paintRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleGracePeriodForCancelling(
      _saleGracePeriodForCancellingInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSlidingEndTimeForBidsEnabled(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slidingEndTimeForBidsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokens(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedSellerBuyerContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawExcessNFTs(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawExcessTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptBestOffer(
    _marketplaceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptOfferAfterDeadlineEnabled(overrides?: CallOverrides): Promise<boolean>;

  addSale(
    _nfts: string[],
    _tokenIds: BigNumberish[],
    _amountBatches: BigNumberish[],
    _price: BigNumberish,
    _times: BigNumberish[],
    _amount: BigNumberish,
    _flags: boolean[],
    _marketplaceURI: string,
    _searchKeywords: string,
    _addresses: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWhitelistedSellerBuyerContract(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctionEndTimeIncreaseCutOff(overrides?: CallOverrides): Promise<BigNumber>;

  bundlesEnabled(overrides?: CallOverrides): Promise<boolean>;

  buy(
    _marketplaceId: BigNumberish,
    _amount: BigNumberish,
    _buyer: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelCutoff(overrides?: CallOverrides): Promise<BigNumber>;

  cancelSale(
    _marketplaceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeMarketplaceEntry(
    _marketplaceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentMarketplaceId(overrides?: CallOverrides): Promise<BigNumber>;

  devFeeAddress(overrides?: CallOverrides): Promise<string>;

  devFeePercentage(overrides?: CallOverrides): Promise<number>;

  devSalesFeeAddress(overrides?: CallOverrides): Promise<string>;

  editPrice(
    _marketplaceId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endTimeCutOff(overrides?: CallOverrides): Promise<BigNumber>;

  excessNFTAmount(
    _nft: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  excessTokenAmount(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSaleDetails(
    _marketplaceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<NftDetailsStructOutput>;

  isSellingEnabled(overrides?: CallOverrides): Promise<boolean>;

  makeBid(
    _marketplaceId: BigNumberish,
    _bid: BigNumberish,
    _buyer: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeOffer(
    _marketplaceId: BigNumberish,
    _offer: BigNumberish,
    _buyer: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketplaceWhitelist(overrides?: CallOverrides): Promise<string>;

  maxBundleNumber(overrides?: CallOverrides): Promise<BigNumber>;

  maxDuration(overrides?: CallOverrides): Promise<BigNumber>;

  maxStartTimeIncrement(overrides?: CallOverrides): Promise<BigNumber>;

  minDuration(overrides?: CallOverrides): Promise<BigNumber>;

  minIncreasedBidOfferPercent(overrides?: CallOverrides): Promise<BigNumber>;

  modifyInitialStartTime(overrides?: CallOverrides): Promise<boolean>;

  nextMinimumBidOrOffer(
    _marketplaceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  officialNFTDiscount(overrides?: CallOverrides): Promise<string>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onlySellerAndHighestOfferCanEndSale(
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeWhitelistedSellerBuyerContract(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { maxRoyalty: BigNumber; collectionRoyalties: string }
  >;

  saleGracePeriodForCancelling(overrides?: CallOverrides): Promise<BigNumber>;

  setAcceptOfferAfterDeadlineEnabled(
    _enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionEndTimeIncreaseCutOff(
    _auctionEndTimeIncreaseCutOff: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBundlesSupported(
    _enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCallGasLimit(
    _callGasLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCancelCutoff(
    _cancelCutoff: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevAddress(
    _dev: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevFeePercentage(
    _feePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevSalesAddress(
    _dev: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnableSelling(
    _enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEndTimeCutoff(
    _endTimeCutoff: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxBundleNumber(
    _maxBundleNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxDuration(
    _maxDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRoyalty(
    _maxRoyalty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxStartTimeIncrement(
    _maxStartTimeIncrement: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinIncreasedBidOfferPercent(
    _minIncreasedBidOfferPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumDuration(
    _minDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setModifyInitialStartTime(
    _modifyInitialStartTime: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOfficialNFTDiscount(
    _officialNFTDiscount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOnlySellerAndHighestOfferCanEndSale(
    _enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    _paintRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleGracePeriodForCancelling(
    _saleGracePeriodForCancellingInSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSlidingEndTimeForBidsEnabled(
    _enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slidingEndTimeForBidsEnabled(overrides?: CallOverrides): Promise<boolean>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokens(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedSellerBuyerContract(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawExcessNFTs(
    _nft: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawExcessTokens(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBestOffer(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOfferAfterDeadlineEnabled(
      overrides?: CallOverrides
    ): Promise<boolean>;

    addSale(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _amountBatches: BigNumberish[],
      _price: BigNumberish,
      _times: BigNumberish[],
      _amount: BigNumberish,
      _flags: boolean[],
      _marketplaceURI: string,
      _searchKeywords: string,
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addWhitelistedSellerBuyerContract(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionEndTimeIncreaseCutOff(overrides?: CallOverrides): Promise<BigNumber>;

    bundlesEnabled(overrides?: CallOverrides): Promise<boolean>;

    buy(
      _marketplaceId: BigNumberish,
      _amount: BigNumberish,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelCutoff(overrides?: CallOverrides): Promise<BigNumber>;

    cancelSale(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    completeMarketplaceEntry(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentMarketplaceId(overrides?: CallOverrides): Promise<BigNumber>;

    devFeeAddress(overrides?: CallOverrides): Promise<string>;

    devFeePercentage(overrides?: CallOverrides): Promise<number>;

    devSalesFeeAddress(overrides?: CallOverrides): Promise<string>;

    editPrice(
      _marketplaceId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endTimeCutOff(overrides?: CallOverrides): Promise<BigNumber>;

    excessNFTAmount(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    excessTokenAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleDetails(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<NftDetailsStructOutput>;

    isSellingEnabled(overrides?: CallOverrides): Promise<boolean>;

    makeBid(
      _marketplaceId: BigNumberish,
      _bid: BigNumberish,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    makeOffer(
      _marketplaceId: BigNumberish,
      _offer: BigNumberish,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    marketplaceWhitelist(overrides?: CallOverrides): Promise<string>;

    maxBundleNumber(overrides?: CallOverrides): Promise<BigNumber>;

    maxDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxStartTimeIncrement(overrides?: CallOverrides): Promise<BigNumber>;

    minDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minIncreasedBidOfferPercent(overrides?: CallOverrides): Promise<BigNumber>;

    modifyInitialStartTime(overrides?: CallOverrides): Promise<boolean>;

    nextMinimumBidOrOffer(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    officialNFTDiscount(overrides?: CallOverrides): Promise<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onlySellerAndHighestOfferCanEndSale(
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeWhitelistedSellerBuyerContract(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & {
        maxRoyalty: BigNumber;
        collectionRoyalties: string;
      }
    >;

    saleGracePeriodForCancelling(overrides?: CallOverrides): Promise<BigNumber>;

    setAcceptOfferAfterDeadlineEnabled(
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionEndTimeIncreaseCutOff(
      _auctionEndTimeIncreaseCutOff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBundlesSupported(
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCallGasLimit(
      _callGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCancelCutoff(
      _cancelCutoff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevAddress(_dev: string, overrides?: CallOverrides): Promise<void>;

    setDevFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevSalesAddress(_dev: string, overrides?: CallOverrides): Promise<void>;

    setEnableSelling(
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEndTimeCutoff(
      _endTimeCutoff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBundleNumber(
      _maxBundleNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDuration(
      _maxDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRoyalty(
      _maxRoyalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxStartTimeIncrement(
      _maxStartTimeIncrement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinIncreasedBidOfferPercent(
      _minIncreasedBidOfferPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumDuration(
      _minDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setModifyInitialStartTime(
      _modifyInitialStartTime: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setOfficialNFTDiscount(
      _officialNFTDiscount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOnlySellerAndHighestOfferCanEndSale(
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(_paintRouter: string, overrides?: CallOverrides): Promise<void>;

    setSaleGracePeriodForCancelling(
      _saleGracePeriodForCancellingInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlidingEndTimeForBidsEnabled(
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    slidingEndTimeForBidsEnabled(overrides?: CallOverrides): Promise<boolean>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokens(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedSellerBuyerContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawExcessNFTs(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawExcessTokens(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelledSale(uint256,address[],uint256[],uint256[])"(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null
    ): CancelledSaleEventFilter;
    CancelledSale(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null
    ): CancelledSaleEventFilter;

    "NewBid(uint256,address,uint128,uint256)"(
      marketplaceId?: null,
      bidder?: string | null,
      bid?: null,
      nextMinimum?: null
    ): NewBidEventFilter;
    NewBid(
      marketplaceId?: null,
      bidder?: string | null,
      bid?: null,
      nextMinimum?: null
    ): NewBidEventFilter;

    "NewOffer(uint256,address,uint128,uint256)"(
      marketplaceId?: null,
      offerer?: string | null,
      offer?: null,
      nextMinimum?: null
    ): NewOfferEventFilter;
    NewOffer(
      marketplaceId?: null,
      offerer?: string | null,
      offer?: null,
      nextMinimum?: null
    ): NewOfferEventFilter;

    "NewSale(uint256,address[],uint256[],uint256[],uint128,uint256,bool,uint256,bool,string,string,address[])"(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      price?: null,
      duration?: null,
      isAuction?: null,
      amount?: null,
      isNSFW?: null,
      marketplaceURI?: null,
      searchKeywords?: null,
      addresses?: null
    ): NewSaleEventFilter;
    NewSale(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      price?: null,
      duration?: null,
      isAuction?: null,
      amount?: null,
      isNSFW?: null,
      marketplaceURI?: null,
      searchKeywords?: null,
      addresses?: null
    ): NewSaleEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SaleFinished(uint256,address[],uint256[],uint256[],bool)"(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      failedSellAll?: null
    ): SaleFinishedEventFilter;
    SaleFinished(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      failedSellAll?: null
    ): SaleFinishedEventFilter;

    "Sold(uint256,address[],uint256[],uint256[],uint128,address,address,uint256)"(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      price?: null,
      buyer?: null,
      seller?: null,
      amount?: null
    ): SoldEventFilter;
    Sold(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      price?: null,
      buyer?: null,
      seller?: null,
      amount?: null
    ): SoldEventFilter;

    "UpdateEndTime(uint256,uint256)"(
      marketplaceId?: null,
      endTime?: null
    ): UpdateEndTimeEventFilter;
    UpdateEndTime(
      marketplaceId?: null,
      endTime?: null
    ): UpdateEndTimeEventFilter;

    "UpdatePrice(uint256,uint128,address[],uint256[])"(
      marketplaceId?: null,
      price?: null,
      nfts?: null,
      tokenIds?: null
    ): UpdatePriceEventFilter;
    UpdatePrice(
      marketplaceId?: null,
      price?: null,
      nfts?: null,
      tokenIds?: null
    ): UpdatePriceEventFilter;

    "UpdateStartTime(uint256,uint256)"(
      marketplaceId?: null,
      startTime?: null
    ): UpdateStartTimeEventFilter;
    UpdateStartTime(
      marketplaceId?: null,
      startTime?: null
    ): UpdateStartTimeEventFilter;
  };

  estimateGas: {
    acceptBestOffer(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptOfferAfterDeadlineEnabled(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addSale(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _amountBatches: BigNumberish[],
      _price: BigNumberish,
      _times: BigNumberish[],
      _amount: BigNumberish,
      _flags: boolean[],
      _marketplaceURI: string,
      _searchKeywords: string,
      _addresses: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWhitelistedSellerBuyerContract(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctionEndTimeIncreaseCutOff(overrides?: CallOverrides): Promise<BigNumber>;

    bundlesEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      _marketplaceId: BigNumberish,
      _amount: BigNumberish,
      _buyer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelCutoff(overrides?: CallOverrides): Promise<BigNumber>;

    cancelSale(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeMarketplaceEntry(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentMarketplaceId(overrides?: CallOverrides): Promise<BigNumber>;

    devFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    devFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    devSalesFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    editPrice(
      _marketplaceId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endTimeCutOff(overrides?: CallOverrides): Promise<BigNumber>;

    excessNFTAmount(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    excessTokenAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleDetails(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSellingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    makeBid(
      _marketplaceId: BigNumberish,
      _bid: BigNumberish,
      _buyer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeOffer(
      _marketplaceId: BigNumberish,
      _offer: BigNumberish,
      _buyer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketplaceWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    maxBundleNumber(overrides?: CallOverrides): Promise<BigNumber>;

    maxDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxStartTimeIncrement(overrides?: CallOverrides): Promise<BigNumber>;

    minDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minIncreasedBidOfferPercent(overrides?: CallOverrides): Promise<BigNumber>;

    modifyInitialStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    nextMinimumBidOrOffer(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    officialNFTDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onlySellerAndHighestOfferCanEndSale(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelistedSellerBuyerContract(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltyInfo(overrides?: CallOverrides): Promise<BigNumber>;

    saleGracePeriodForCancelling(overrides?: CallOverrides): Promise<BigNumber>;

    setAcceptOfferAfterDeadlineEnabled(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionEndTimeIncreaseCutOff(
      _auctionEndTimeIncreaseCutOff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBundlesSupported(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCallGasLimit(
      _callGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCancelCutoff(
      _cancelCutoff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevAddress(
      _dev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevSalesAddress(
      _dev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnableSelling(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEndTimeCutoff(
      _endTimeCutoff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxBundleNumber(
      _maxBundleNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxDuration(
      _maxDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRoyalty(
      _maxRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxStartTimeIncrement(
      _maxStartTimeIncrement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinIncreasedBidOfferPercent(
      _minIncreasedBidOfferPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumDuration(
      _minDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setModifyInitialStartTime(
      _modifyInitialStartTime: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOfficialNFTDiscount(
      _officialNFTDiscount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOnlySellerAndHighestOfferCanEndSale(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRouter(
      _paintRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleGracePeriodForCancelling(
      _saleGracePeriodForCancellingInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSlidingEndTimeForBidsEnabled(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slidingEndTimeForBidsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedSellerBuyerContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawExcessNFTs(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawExcessTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBestOffer(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptOfferAfterDeadlineEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addSale(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _amountBatches: BigNumberish[],
      _price: BigNumberish,
      _times: BigNumberish[],
      _amount: BigNumberish,
      _flags: boolean[],
      _marketplaceURI: string,
      _searchKeywords: string,
      _addresses: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWhitelistedSellerBuyerContract(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctionEndTimeIncreaseCutOff(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bundlesEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      _marketplaceId: BigNumberish,
      _amount: BigNumberish,
      _buyer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelCutoff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelSale(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeMarketplaceEntry(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentMarketplaceId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    devFeeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devFeePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devSalesFeeAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    editPrice(
      _marketplaceId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endTimeCutOff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excessNFTAmount(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    excessTokenAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSaleDetails(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSellingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeBid(
      _marketplaceId: BigNumberish,
      _bid: BigNumberish,
      _buyer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeOffer(
      _marketplaceId: BigNumberish,
      _offer: BigNumberish,
      _buyer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketplaceWhitelist(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxBundleNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxStartTimeIncrement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minIncreasedBidOfferPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyInitialStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextMinimumBidOrOffer(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    officialNFTDiscount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onlySellerAndHighestOfferCanEndSale(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWhitelistedSellerBuyerContract(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleGracePeriodForCancelling(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAcceptOfferAfterDeadlineEnabled(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionEndTimeIncreaseCutOff(
      _auctionEndTimeIncreaseCutOff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBundlesSupported(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCallGasLimit(
      _callGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCancelCutoff(
      _cancelCutoff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevAddress(
      _dev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevSalesAddress(
      _dev: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnableSelling(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEndTimeCutoff(
      _endTimeCutoff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBundleNumber(
      _maxBundleNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDuration(
      _maxDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRoyalty(
      _maxRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxStartTimeIncrement(
      _maxStartTimeIncrement: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinIncreasedBidOfferPercent(
      _minIncreasedBidOfferPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumDuration(
      _minDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setModifyInitialStartTime(
      _modifyInitialStartTime: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOfficialNFTDiscount(
      _officialNFTDiscount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOnlySellerAndHighestOfferCanEndSale(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      _paintRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleGracePeriodForCancelling(
      _saleGracePeriodForCancellingInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSlidingEndTimeForBidsEnabled(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slidingEndTimeForBidsEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedSellerBuyerContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawExcessNFTs(
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawExcessTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
