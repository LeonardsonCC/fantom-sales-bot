/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type BidStruct = {
  tokenId: BigNumberish;
  value: BigNumberish;
  bidder: string;
  expireTimestamp: BigNumberish;
};

export type BidStructOutput = [BigNumber, BigNumber, string, BigNumber] & {
  tokenId: BigNumber;
  value: BigNumber;
  bidder: string;
  expireTimestamp: BigNumber;
};

export type ListingStruct = {
  tokenId: BigNumberish;
  value: BigNumberish;
  seller: string;
  expireTimestamp: BigNumberish;
};

export type ListingStructOutput = [BigNumber, BigNumber, string, BigNumber] & {
  tokenId: BigNumber;
  value: BigNumber;
  seller: string;
  expireTimestamp: BigNumber;
};

export type ERC721CollectionRoyaltyStruct = {
  recipient: string;
  feeFraction: BigNumberish;
  setBy: string;
};

export type ERC721CollectionRoyaltyStructOutput = [
  string,
  BigNumber,
  string
] & { recipient: string; feeFraction: BigNumber; setBy: string };

export interface NFTKeyInterface extends utils.Interface {
  functions: {
    "acceptBidForToken(address,uint256,address,uint256)": FunctionFragment;
    "actionTimeOutRangeMax()": FunctionFragment;
    "actionTimeOutRangeMin()": FunctionFragment;
    "buyToken(address,uint256)": FunctionFragment;
    "changeMarketplaceStatus(bool)": FunctionFragment;
    "changeMaxActionTimeLimit(uint256)": FunctionFragment;
    "changeMinActionTimeLimit(uint256)": FunctionFragment;
    "changeSeriveFee(uint8)": FunctionFragment;
    "defaultRoyaltyFraction()": FunctionFragment;
    "delistToken(address,uint256)": FunctionFragment;
    "enterBidForToken(address,uint256,uint256,uint256)": FunctionFragment;
    "getBidderBids(address,address,uint256,uint256)": FunctionFragment;
    "getBidderTokenBid(address,uint256,address)": FunctionFragment;
    "getTokenBids(address,uint256)": FunctionFragment;
    "getTokenHighestBid(address,uint256)": FunctionFragment;
    "getTokenHighestBids(address,uint256,uint256)": FunctionFragment;
    "getTokenListing(address,uint256)": FunctionFragment;
    "getTokenListings(address,uint256,uint256)": FunctionFragment;
    "isTradingEnabled()": FunctionFragment;
    "listToken(address,uint256,uint256,uint256)": FunctionFragment;
    "numTokenListings(address)": FunctionFragment;
    "numTokenWithBids(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentToken()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royalty(address)": FunctionFragment;
    "royaltyUpperLimit()": FunctionFragment;
    "serviceFee()": FunctionFragment;
    "setRoyalty(address,address,uint256)": FunctionFragment;
    "setRoyaltyForCollection(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRoyaltyUpperLimit(uint256)": FunctionFragment;
    "withdrawBidForToken(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBidForToken",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "actionTimeOutRangeMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "actionTimeOutRangeMin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMarketplaceStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaxActionTimeLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinActionTimeLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSeriveFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultRoyaltyFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delistToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterBidForToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidderBids",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidderTokenBid",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBids",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenHighestBid",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenHighestBids",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenListing",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenListings",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTradingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numTokenListings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "numTokenWithBids",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "royalty", values: [string]): string;
  encodeFunctionData(
    functionFragment: "royaltyUpperLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalty",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyForCollection",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoyaltyUpperLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBidForToken",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptBidForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "actionTimeOutRangeMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "actionTimeOutRangeMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMarketplaceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMaxActionTimeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinActionTimeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSeriveFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultRoyaltyFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterBidForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidderBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidderTokenBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenHighestBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenHighestBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numTokenListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numTokenWithBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "royalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyUpperLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "serviceFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoyalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyForCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoyaltyUpperLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBidForToken",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetRoyalty(address,address,uint256)": EventFragment;
    "TokenBidAccepted(address,uint256,address,tuple,uint256,uint256)": EventFragment;
    "TokenBidEntered(address,uint256,tuple)": EventFragment;
    "TokenBidWithdrawn(address,uint256,tuple)": EventFragment;
    "TokenBought(address,uint256,address,tuple,uint256,uint256)": EventFragment;
    "TokenDelisted(address,uint256,tuple)": EventFragment;
    "TokenListed(address,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRoyalty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenBidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenBidEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenBidWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenListed"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SetRoyaltyEvent = TypedEvent<
  [string, string, BigNumber],
  { erc721Address: string; recipient: string; feeFraction: BigNumber }
>;

export type SetRoyaltyEventFilter = TypedEventFilter<SetRoyaltyEvent>;

export type TokenBidAcceptedEvent = TypedEvent<
  [string, BigNumber, string, BidStructOutput, BigNumber, BigNumber],
  {
    erc721Address: string;
    tokenId: BigNumber;
    seller: string;
    bid: BidStructOutput;
    serviceFee: BigNumber;
    royaltyFee: BigNumber;
  }
>;

export type TokenBidAcceptedEventFilter =
  TypedEventFilter<TokenBidAcceptedEvent>;

export type TokenBidEnteredEvent = TypedEvent<
  [string, BigNumber, BidStructOutput],
  { erc721Address: string; tokenId: BigNumber; bid: BidStructOutput }
>;

export type TokenBidEnteredEventFilter = TypedEventFilter<TokenBidEnteredEvent>;

export type TokenBidWithdrawnEvent = TypedEvent<
  [string, BigNumber, BidStructOutput],
  { erc721Address: string; tokenId: BigNumber; bid: BidStructOutput }
>;

export type TokenBidWithdrawnEventFilter =
  TypedEventFilter<TokenBidWithdrawnEvent>;

export type TokenBoughtEvent = TypedEvent<
  [string, BigNumber, string, ListingStructOutput, BigNumber, BigNumber],
  {
    erc721Address: string;
    tokenId: BigNumber;
    buyer: string;
    listing: ListingStructOutput;
    serviceFee: BigNumber;
    royaltyFee: BigNumber;
  }
>;

export type TokenBoughtEventFilter = TypedEventFilter<TokenBoughtEvent>;

export type TokenDelistedEvent = TypedEvent<
  [string, BigNumber, ListingStructOutput],
  { erc721Address: string; tokenId: BigNumber; listing: ListingStructOutput }
>;

export type TokenDelistedEventFilter = TypedEventFilter<TokenDelistedEvent>;

export type TokenListedEvent = TypedEvent<
  [string, BigNumber, ListingStructOutput],
  { erc721Address: string; tokenId: BigNumber; listing: ListingStructOutput }
>;

export type TokenListedEventFilter = TypedEventFilter<TokenListedEvent>;

export interface NFTKey extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTKeyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptBidForToken(
      erc721Address: string,
      tokenId: BigNumberish,
      bidder: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    actionTimeOutRangeMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    actionTimeOutRangeMin(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyToken(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMarketplaceStatus(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMaxActionTimeLimit(
      timeInSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMinActionTimeLimit(
      timeInSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeSeriveFee(
      serviceFeeFraction_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultRoyaltyFraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    delistToken(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enterBidForToken(
      erc721Address: string,
      tokenId: BigNumberish,
      value: BigNumberish,
      expireTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBidderBids(
      erc721Address: string,
      bidder: string,
      from: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BidStructOutput[]] & { bidderBids: BidStructOutput[] }>;

    getBidderTokenBid(
      erc721Address: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<[BidStructOutput] & { validBid: BidStructOutput }>;

    getTokenBids(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BidStructOutput[]] & { bids: BidStructOutput[] }>;

    getTokenHighestBid(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BidStructOutput] & { highestBid: BidStructOutput }>;

    getTokenHighestBids(
      erc721Address: string,
      from: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BidStructOutput[]] & { highestBids: BidStructOutput[] }>;

    getTokenListing(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ListingStructOutput] & { validListing: ListingStructOutput }>;

    getTokenListings(
      erc721Address: string,
      from: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ListingStructOutput[]] & { listings: ListingStructOutput[] }>;

    isTradingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    listToken(
      erc721Address: string,
      tokenId: BigNumberish,
      value: BigNumberish,
      expireTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numTokenListings(
      erc721Address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numTokenWithBids(
      erc721Address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentToken(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royalty(
      erc721Address: string,
      overrides?: CallOverrides
    ): Promise<[ERC721CollectionRoyaltyStructOutput]>;

    royaltyUpperLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    serviceFee(overrides?: CallOverrides): Promise<[number]>;

    setRoyalty(
      erc721Address: string,
      newRecipient: string,
      feeFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoyaltyForCollection(
      erc721Address: string,
      newRecipient: string,
      feeFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRoyaltyUpperLimit(
      _newUpperLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBidForToken(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptBidForToken(
    erc721Address: string,
    tokenId: BigNumberish,
    bidder: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  actionTimeOutRangeMax(overrides?: CallOverrides): Promise<BigNumber>;

  actionTimeOutRangeMin(overrides?: CallOverrides): Promise<BigNumber>;

  buyToken(
    erc721Address: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMarketplaceStatus(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMaxActionTimeLimit(
    timeInSec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMinActionTimeLimit(
    timeInSec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeSeriveFee(
    serviceFeeFraction_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultRoyaltyFraction(overrides?: CallOverrides): Promise<BigNumber>;

  delistToken(
    erc721Address: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enterBidForToken(
    erc721Address: string,
    tokenId: BigNumberish,
    value: BigNumberish,
    expireTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBidderBids(
    erc721Address: string,
    bidder: string,
    from: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BidStructOutput[]>;

  getBidderTokenBid(
    erc721Address: string,
    tokenId: BigNumberish,
    bidder: string,
    overrides?: CallOverrides
  ): Promise<BidStructOutput>;

  getTokenBids(
    erc721Address: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BidStructOutput[]>;

  getTokenHighestBid(
    erc721Address: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BidStructOutput>;

  getTokenHighestBids(
    erc721Address: string,
    from: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BidStructOutput[]>;

  getTokenListing(
    erc721Address: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ListingStructOutput>;

  getTokenListings(
    erc721Address: string,
    from: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ListingStructOutput[]>;

  isTradingEnabled(overrides?: CallOverrides): Promise<boolean>;

  listToken(
    erc721Address: string,
    tokenId: BigNumberish,
    value: BigNumberish,
    expireTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numTokenListings(
    erc721Address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numTokenWithBids(
    erc721Address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentToken(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royalty(
    erc721Address: string,
    overrides?: CallOverrides
  ): Promise<ERC721CollectionRoyaltyStructOutput>;

  royaltyUpperLimit(overrides?: CallOverrides): Promise<BigNumber>;

  serviceFee(overrides?: CallOverrides): Promise<number>;

  setRoyalty(
    erc721Address: string,
    newRecipient: string,
    feeFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoyaltyForCollection(
    erc721Address: string,
    newRecipient: string,
    feeFraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRoyaltyUpperLimit(
    _newUpperLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBidForToken(
    erc721Address: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBidForToken(
      erc721Address: string,
      tokenId: BigNumberish,
      bidder: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    actionTimeOutRangeMax(overrides?: CallOverrides): Promise<BigNumber>;

    actionTimeOutRangeMin(overrides?: CallOverrides): Promise<BigNumber>;

    buyToken(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMarketplaceStatus(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMaxActionTimeLimit(
      timeInSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMinActionTimeLimit(
      timeInSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSeriveFee(
      serviceFeeFraction_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultRoyaltyFraction(overrides?: CallOverrides): Promise<BigNumber>;

    delistToken(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterBidForToken(
      erc721Address: string,
      tokenId: BigNumberish,
      value: BigNumberish,
      expireTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBidderBids(
      erc721Address: string,
      bidder: string,
      from: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BidStructOutput[]>;

    getBidderTokenBid(
      erc721Address: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BidStructOutput>;

    getTokenBids(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BidStructOutput[]>;

    getTokenHighestBid(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BidStructOutput>;

    getTokenHighestBids(
      erc721Address: string,
      from: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BidStructOutput[]>;

    getTokenListing(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ListingStructOutput>;

    getTokenListings(
      erc721Address: string,
      from: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ListingStructOutput[]>;

    isTradingEnabled(overrides?: CallOverrides): Promise<boolean>;

    listToken(
      erc721Address: string,
      tokenId: BigNumberish,
      value: BigNumberish,
      expireTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    numTokenListings(
      erc721Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numTokenWithBids(
      erc721Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentToken(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royalty(
      erc721Address: string,
      overrides?: CallOverrides
    ): Promise<ERC721CollectionRoyaltyStructOutput>;

    royaltyUpperLimit(overrides?: CallOverrides): Promise<BigNumber>;

    serviceFee(overrides?: CallOverrides): Promise<number>;

    setRoyalty(
      erc721Address: string,
      newRecipient: string,
      feeFraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltyForCollection(
      erc721Address: string,
      newRecipient: string,
      feeFraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRoyaltyUpperLimit(
      _newUpperLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBidForToken(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetRoyalty(address,address,uint256)"(
      erc721Address?: string | null,
      recipient?: string | null,
      feeFraction?: null
    ): SetRoyaltyEventFilter;
    SetRoyalty(
      erc721Address?: string | null,
      recipient?: string | null,
      feeFraction?: null
    ): SetRoyaltyEventFilter;

    "TokenBidAccepted(address,uint256,address,tuple,uint256,uint256)"(
      erc721Address?: string | null,
      tokenId?: BigNumberish | null,
      seller?: string | null,
      bid?: null,
      serviceFee?: null,
      royaltyFee?: null
    ): TokenBidAcceptedEventFilter;
    TokenBidAccepted(
      erc721Address?: string | null,
      tokenId?: BigNumberish | null,
      seller?: string | null,
      bid?: null,
      serviceFee?: null,
      royaltyFee?: null
    ): TokenBidAcceptedEventFilter;

    "TokenBidEntered(address,uint256,tuple)"(
      erc721Address?: string | null,
      tokenId?: BigNumberish | null,
      bid?: null
    ): TokenBidEnteredEventFilter;
    TokenBidEntered(
      erc721Address?: string | null,
      tokenId?: BigNumberish | null,
      bid?: null
    ): TokenBidEnteredEventFilter;

    "TokenBidWithdrawn(address,uint256,tuple)"(
      erc721Address?: string | null,
      tokenId?: BigNumberish | null,
      bid?: null
    ): TokenBidWithdrawnEventFilter;
    TokenBidWithdrawn(
      erc721Address?: string | null,
      tokenId?: BigNumberish | null,
      bid?: null
    ): TokenBidWithdrawnEventFilter;

    "TokenBought(address,uint256,address,tuple,uint256,uint256)"(
      erc721Address?: string | null,
      tokenId?: BigNumberish | null,
      buyer?: string | null,
      listing?: null,
      serviceFee?: null,
      royaltyFee?: null
    ): TokenBoughtEventFilter;
    TokenBought(
      erc721Address?: string | null,
      tokenId?: BigNumberish | null,
      buyer?: string | null,
      listing?: null,
      serviceFee?: null,
      royaltyFee?: null
    ): TokenBoughtEventFilter;

    "TokenDelisted(address,uint256,tuple)"(
      erc721Address?: string | null,
      tokenId?: BigNumberish | null,
      listing?: null
    ): TokenDelistedEventFilter;
    TokenDelisted(
      erc721Address?: string | null,
      tokenId?: BigNumberish | null,
      listing?: null
    ): TokenDelistedEventFilter;

    "TokenListed(address,uint256,tuple)"(
      erc721Address?: string | null,
      tokenId?: BigNumberish | null,
      listing?: null
    ): TokenListedEventFilter;
    TokenListed(
      erc721Address?: string | null,
      tokenId?: BigNumberish | null,
      listing?: null
    ): TokenListedEventFilter;
  };

  estimateGas: {
    acceptBidForToken(
      erc721Address: string,
      tokenId: BigNumberish,
      bidder: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    actionTimeOutRangeMax(overrides?: CallOverrides): Promise<BigNumber>;

    actionTimeOutRangeMin(overrides?: CallOverrides): Promise<BigNumber>;

    buyToken(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMarketplaceStatus(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMaxActionTimeLimit(
      timeInSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMinActionTimeLimit(
      timeInSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeSeriveFee(
      serviceFeeFraction_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultRoyaltyFraction(overrides?: CallOverrides): Promise<BigNumber>;

    delistToken(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enterBidForToken(
      erc721Address: string,
      tokenId: BigNumberish,
      value: BigNumberish,
      expireTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBidderBids(
      erc721Address: string,
      bidder: string,
      from: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidderTokenBid(
      erc721Address: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBids(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenHighestBid(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenHighestBids(
      erc721Address: string,
      from: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenListing(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenListings(
      erc721Address: string,
      from: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTradingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    listToken(
      erc721Address: string,
      tokenId: BigNumberish,
      value: BigNumberish,
      expireTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numTokenListings(
      erc721Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numTokenWithBids(
      erc721Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royalty(
      erc721Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    royaltyUpperLimit(overrides?: CallOverrides): Promise<BigNumber>;

    serviceFee(overrides?: CallOverrides): Promise<BigNumber>;

    setRoyalty(
      erc721Address: string,
      newRecipient: string,
      feeFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoyaltyForCollection(
      erc721Address: string,
      newRecipient: string,
      feeFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRoyaltyUpperLimit(
      _newUpperLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBidForToken(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBidForToken(
      erc721Address: string,
      tokenId: BigNumberish,
      bidder: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    actionTimeOutRangeMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    actionTimeOutRangeMin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyToken(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMarketplaceStatus(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMaxActionTimeLimit(
      timeInSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMinActionTimeLimit(
      timeInSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeSeriveFee(
      serviceFeeFraction_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultRoyaltyFraction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delistToken(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enterBidForToken(
      erc721Address: string,
      tokenId: BigNumberish,
      value: BigNumberish,
      expireTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBidderBids(
      erc721Address: string,
      bidder: string,
      from: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidderTokenBid(
      erc721Address: string,
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenBids(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenHighestBid(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenHighestBids(
      erc721Address: string,
      from: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenListing(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenListings(
      erc721Address: string,
      from: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTradingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listToken(
      erc721Address: string,
      tokenId: BigNumberish,
      value: BigNumberish,
      expireTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numTokenListings(
      erc721Address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numTokenWithBids(
      erc721Address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royalty(
      erc721Address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    royaltyUpperLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    serviceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRoyalty(
      erc721Address: string,
      newRecipient: string,
      feeFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltyForCollection(
      erc721Address: string,
      newRecipient: string,
      feeFraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRoyaltyUpperLimit(
      _newUpperLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBidForToken(
      erc721Address: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
