/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OfferStruct = {
  nft: string;
  nfts: string[];
  tokenIds: BigNumberish[];
  quantity: BigNumberish;
  quantityRemaining: BigNumberish;
  price: BigNumberish;
  prices: BigNumberish[];
  from: string;
  offerType: BigNumberish;
  expires: BigNumberish;
  saleId: BigNumberish;
};

export type OfferStructOutput = [
  string,
  string[],
  BigNumber[],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber[],
  string,
  number,
  BigNumber,
  BigNumber
] & {
  nft: string;
  nfts: string[];
  tokenIds: BigNumber[];
  quantity: BigNumber;
  quantityRemaining: BigNumber;
  price: BigNumber;
  prices: BigNumber[];
  from: string;
  offerType: number;
  expires: BigNumber;
  saleId: BigNumber;
};

export type FullDetailsStruct = {
  nfts: string[];
  tokenIds: BigNumberish[];
  amountBatches: BigNumberish[];
  startTime: BigNumberish;
  endTime: BigNumberish;
  price: BigNumberish;
  maxBid: BigNumberish;
  maxBidder: string;
  seller: string;
  isAuction: boolean;
  complete: boolean;
  antisnipe: boolean;
  flashAuction: boolean;
  amount: BigNumberish;
  amountRemaining: BigNumberish;
  paymentToken: string;
  vault: string;
};

export type FullDetailsStructOutput = [
  string[],
  BigNumber[],
  BigNumber[],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  boolean,
  boolean,
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  nfts: string[];
  tokenIds: BigNumber[];
  amountBatches: BigNumber[];
  startTime: BigNumber;
  endTime: BigNumber;
  price: BigNumber;
  maxBid: BigNumber;
  maxBidder: string;
  seller: string;
  isAuction: boolean;
  complete: boolean;
  antisnipe: boolean;
  flashAuction: boolean;
  amount: BigNumber;
  amountRemaining: BigNumber;
  paymentToken: string;
  vault: string;
};

export type BulkTransferInfoStruct = {
  nft: string;
  tokenIds: BigNumberish[];
  amounts: BigNumberish[];
  to: string;
};

export type BulkTransferInfoStructOutput = [
  string,
  BigNumber[],
  BigNumber[],
  string
] & { nft: string; tokenIds: BigNumber[]; amounts: BigNumber[]; to: string };

export interface PaintSwapV3Interface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "acceptOffer(uint256,address,uint256,uint128,string)": FunctionFragment;
    "acceptOfferBatch(uint256[],address[],uint256[],bool[],uint128[],string[])": FunctionFragment;
    "acceptOnSaleOffer(uint256,uint128,uint256)": FunctionFragment;
    "addSale(address[],uint256[],uint256[],uint128,uint64[],uint128,bool[],string,address[])": FunctionFragment;
    "addSaleBatch(address[][],uint256[][],uint256[][],uint128[],uint64[][],uint128[],bool[][],string[],address[][])": FunctionFragment;
    "addValidVaultFactory(address)": FunctionFragment;
    "auctionEndTimeIncreaseCutOff()": FunctionFragment;
    "auctionGracePeriodForCancelling()": FunctionFragment;
    "buy(uint256,uint128)": FunctionFragment;
    "buyBatch(uint256[],uint128[],bool)": FunctionFragment;
    "cancelOffer(uint256)": FunctionFragment;
    "cancelOfferBatch(uint256[])": FunctionFragment;
    "cancelSale(uint256)": FunctionFragment;
    "cancelSaleBatch(uint256[])": FunctionFragment;
    "completeMarketplaceEntry(uint256)": FunctionFragment;
    "currentMarketplaceId()": FunctionFragment;
    "devFeeAddress()": FunctionFragment;
    "editOffer(uint256,address,uint256,uint128,uint128,uint256)": FunctionFragment;
    "editOfferBatch(uint256[],address[],uint256[],uint128[],uint128[],uint256[])": FunctionFragment;
    "editPrice(uint256,uint128)": FunctionFragment;
    "editPriceAndQuantity(uint256,uint128,uint128)": FunctionFragment;
    "editPriceAndQuantityBatch(uint256[],uint128[],uint128[])": FunctionFragment;
    "editPriceBatch(uint256[],uint128[])": FunctionFragment;
    "editQuantity(uint256,uint128)": FunctionFragment;
    "editQuantityBatch(uint256[],uint128[])": FunctionFragment;
    "expireOffers(uint256[])": FunctionFragment;
    "flashAuctionEndTimeIncreaseCutOff()": FunctionFragment;
    "flashAuctionGracePeriodForCancelling()": FunctionFragment;
    "getOffer(uint256)": FunctionFragment;
    "getSaleDetails(uint256)": FunctionFragment;
    "hasExistingActiveOffers(address[],uint256[],address)": FunctionFragment;
    "makeAltOffer(address[],uint256[],uint128,uint128[],uint256,string[])": FunctionFragment;
    "makeBid(uint256,uint128)": FunctionFragment;
    "makeBidBatch(uint256[],uint128[])": FunctionFragment;
    "makeCollectionOffer(address,uint128,uint128,uint256,string)": FunctionFragment;
    "makeFilteredCollectionOffer(address,uint256[],uint128,uint128[],uint256,string[])": FunctionFragment;
    "makeFilteredCollectionOfferBatch(address[],uint256[][],uint128[],uint128[][],uint256[],string[][])": FunctionFragment;
    "makeOffer(uint256,uint128,uint128,uint256)": FunctionFragment;
    "makeOfferBatch(uint256[],uint128[],uint128[],uint256[])": FunctionFragment;
    "makeOfferSingle(address,uint256,uint128,uint128,uint256,string)": FunctionFragment;
    "makeOfferSingleBatch(address[],uint256[],uint128[],uint128[],uint256[],string[])": FunctionFragment;
    "maxActiveOfferCount()": FunctionFragment;
    "maxAuctionDuration()": FunctionFragment;
    "maxDuration()": FunctionFragment;
    "maxOfferDuration()": FunctionFragment;
    "maxStartTimeIncrement()": FunctionFragment;
    "minAuctionDuration()": FunctionFragment;
    "minDuration()": FunctionFragment;
    "minFlashAuctionDuration()": FunctionFragment;
    "minIncreasedBidPercent()": FunctionFragment;
    "minOfferDuration()": FunctionFragment;
    "minVaultVersion()": FunctionFragment;
    "nextMinimumBid(uint256)": FunctionFragment;
    "offerCounts(address)": FunctionFragment;
    "offerId()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeInvalidVaultFactory(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserve1(bytes)": FunctionFragment;
    "reserve2(bytes)": FunctionFragment;
    "reserve3(bytes)": FunctionFragment;
    "reserve4(bytes)": FunctionFragment;
    "reserveOnlyOwner(bytes)": FunctionFragment;
    "safeNFTTransferBulk(address[],uint256[],address[],uint256[],uint256,address[],bytes)": FunctionFragment;
    "safeNFTTransferBulkOrdered((address,uint256[],uint256[],address)[],uint256,address,bytes)": FunctionFragment;
    "salesFeeAddress()": FunctionFragment;
    "setBundles(uint128,bool)": FunctionFragment;
    "setDurations(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setEnableSelling(bool)": FunctionFragment;
    "setFeeAddresses(address,address)": FunctionFragment;
    "setFeePercentage(address)": FunctionFragment;
    "setImplBatchTransferNFT(address)": FunctionFragment;
    "setImplBidsAndAcceptOffers(address)": FunctionFragment;
    "setImplBuyEditListing(address)": FunctionFragment;
    "setImplListAndComplete(address)": FunctionFragment;
    "setMaxActiveOfferCountAndMinVaultVersion(uint256,uint256)": FunctionFragment;
    "setOfferDuration(uint256,uint256)": FunctionFragment;
    "setVarious(uint256,uint64,address,uint256,address)": FunctionFragment;
    "setVariousTimes(uint64,uint64,uint64,uint64,uint128,bool,bool)": FunctionFragment;
    "setimplMakeAndEditOffers(address)": FunctionFragment;
    "singleNFTListings(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userAltOffersMade(address)": FunctionFragment;
    "userBundleOffersMade(address,uint256)": FunctionFragment;
    "userCollectionOffersMade(address,address)": FunctionFragment;
    "userFilteredCollectionOffersMade(address,address)": FunctionFragment;
    "userOffersMade(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [BigNumberish, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOfferBatch",
    values: [
      BigNumberish[],
      string[],
      BigNumberish[],
      boolean[],
      BigNumberish[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOnSaleOffer",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addSale",
    values: [
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      boolean[],
      string,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSaleBatch",
    values: [
      string[][],
      BigNumberish[][],
      BigNumberish[][],
      BigNumberish[],
      BigNumberish[][],
      BigNumberish[],
      boolean[][],
      string[],
      string[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addValidVaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionEndTimeIncreaseCutOff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionGracePeriodForCancelling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBatch",
    values: [BigNumberish[], BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOfferBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSaleBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "completeMarketplaceEntry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentMarketplaceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devFeeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editOffer",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editOfferBatch",
    values: [
      BigNumberish[],
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editPriceAndQuantity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editPriceAndQuantityBatch",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "editPriceBatch",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "editQuantity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editQuantityBatch",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "expireOffers",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "flashAuctionEndTimeIncreaseCutOff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashAuctionGracePeriodForCancelling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasExistingActiveOffers",
    values: [string[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeAltOffer",
    values: [
      string[],
      BigNumberish[],
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeBidBatch",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "makeCollectionOffer",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeFilteredCollectionOffer",
    values: [
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeFilteredCollectionOfferBatch",
    values: [
      string[],
      BigNumberish[][],
      BigNumberish[],
      BigNumberish[][],
      BigNumberish[],
      string[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOfferBatch",
    values: [BigNumberish[], BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOfferSingle",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOfferSingleBatch",
    values: [
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxActiveOfferCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxOfferDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxStartTimeIncrement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minFlashAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minIncreasedBidPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minOfferDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minVaultVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextMinimumBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "offerCounts", values: [string]): string;
  encodeFunctionData(functionFragment: "offerId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeInvalidVaultFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve1", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "reserve2", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "reserve3", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "reserve4", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "reserveOnlyOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeNFTTransferBulk",
    values: [
      string[],
      BigNumberish[],
      string[],
      BigNumberish[],
      BigNumberish,
      string[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeNFTTransferBulkOrdered",
    values: [BulkTransferInfoStruct[], BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "salesFeeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBundles",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDurations",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnableSelling",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAddresses",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePercentage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplBatchTransferNFT",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplBidsAndAcceptOffers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplBuyEditListing",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplListAndComplete",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxActiveOfferCountAndMinVaultVersion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOfferDuration",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVarious",
    values: [BigNumberish, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVariousTimes",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setimplMakeAndEditOffers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "singleNFTListings",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userAltOffersMade",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userBundleOffersMade",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userCollectionOffersMade",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userFilteredCollectionOffersMade",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userOffersMade",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOfferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOnSaleOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSaleBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionEndTimeIncreaseCutOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionGracePeriodForCancelling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOfferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelSaleBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeMarketplaceEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMarketplaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "editOfferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "editPriceAndQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editPriceAndQuantityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editPriceBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editQuantityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashAuctionEndTimeIncreaseCutOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashAuctionGracePeriodForCancelling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSaleDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasExistingActiveOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeAltOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeBidBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeCollectionOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeFilteredCollectionOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeFilteredCollectionOfferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeOfferBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeOfferSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeOfferSingleBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxActiveOfferCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxOfferDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxStartTimeIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minFlashAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minIncreasedBidPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minOfferDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVaultVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMinimumBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offerId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeInvalidVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserve2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserve3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserve4", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveOnlyOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeNFTTransferBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeNFTTransferBulkOrdered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBundles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnableSelling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplBatchTransferNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplBidsAndAcceptOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplBuyEditListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplListAndComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxActiveOfferCountAndMinVaultVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOfferDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVarious", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVariousTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setimplMakeAndEditOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singleNFTListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAltOffersMade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBundleOffersMade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollectionOffersMade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userFilteredCollectionOffersMade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userOffersMade",
    data: BytesLike
  ): Result;

  events: {
    "AddedVaultFactory(address)": EventFragment;
    "CancelledSale(uint256,address[],uint256[],uint256[])": EventFragment;
    "NewBid(uint256,address,uint128,uint256)": EventFragment;
    "NewCollectionOffer(uint256,address,address,uint128,uint128,uint256,string)": EventFragment;
    "NewFilteredCollectionOffer(uint256,address,uint256[],address,uint128,uint128,uint128[],uint256,string[])": EventFragment;
    "NewOffer(uint256,uint256,address[],uint256[],address,uint128,uint128,uint256,string)": EventFragment;
    "NewSale(uint256,address[],uint256[],uint256[],uint128,uint256,bool,bool,bool,uint256,bool,string,address[],address)": EventFragment;
    "NewSaleBatch(uint256[],address[][],uint256[][],uint256[][],uint128[],uint256[],bool[],bool[],uint256[],bool[],string[],address[][],address[])": EventFragment;
    "NewTempListing(uint256,address[],uint256[],uint256[],uint128,uint256,bool,bool,bool,uint256,bool,string,address[],address)": EventFragment;
    "OfferAccepted(uint256,address,uint256,uint128,uint256)": EventFragment;
    "OfferCompleted(uint256)": EventFragment;
    "OfferExpired(uint256)": EventFragment;
    "OfferRemoved(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveExpiredListing(uint256)": EventFragment;
    "RemovedVaultFactory(address)": EventFragment;
    "SaleFinished(uint256)": EventFragment;
    "Sold(uint256,address[],uint256[],uint256[],uint128,address,address,uint256,uint256)": EventFragment;
    "UpdateEndTime(uint256,uint256)": EventFragment;
    "UpdateOffer(uint256,address,uint256,uint128,uint128,uint256)": EventFragment;
    "UpdatePrice(uint256,uint128,address[],uint256[])": EventFragment;
    "UpdateQuantity(uint256,address[],uint256[],uint256,uint256)": EventFragment;
    "UpdateStartTime(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedVaultFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelledSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCollectionOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFilteredCollectionOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSaleBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTempListing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveExpiredListing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedVaultFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEndTime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateQuantity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateStartTime"): EventFragment;
}

export type AddedVaultFactoryEvent = TypedEvent<[string], { _factory: string }>;

export type AddedVaultFactoryEventFilter =
  TypedEventFilter<AddedVaultFactoryEvent>;

export type CancelledSaleEvent = TypedEvent<
  [BigNumber, string[], BigNumber[], BigNumber[]],
  {
    marketplaceId: BigNumber;
    nfts: string[];
    tokenIds: BigNumber[];
    amountBatches: BigNumber[];
  }
>;

export type CancelledSaleEventFilter = TypedEventFilter<CancelledSaleEvent>;

export type NewBidEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    marketplaceId: BigNumber;
    bidder: string;
    bid: BigNumber;
    nextMinimum: BigNumber;
  }
>;

export type NewBidEventFilter = TypedEventFilter<NewBidEvent>;

export type NewCollectionOfferEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber, string],
  {
    offerId: BigNumber;
    nft: string;
    from: string;
    quantity: BigNumber;
    price: BigNumber;
    expires: BigNumber;
    searchKeywords: string;
  }
>;

export type NewCollectionOfferEventFilter =
  TypedEventFilter<NewCollectionOfferEvent>;

export type NewFilteredCollectionOfferEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber[],
    string,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber,
    string[]
  ],
  {
    offerId: BigNumber;
    nft: string;
    tokenIds: BigNumber[];
    from: string;
    quantity: BigNumber;
    price: BigNumber;
    prices: BigNumber[];
    expires: BigNumber;
    searchKeywords: string[];
  }
>;

export type NewFilteredCollectionOfferEventFilter =
  TypedEventFilter<NewFilteredCollectionOfferEvent>;

export type NewOfferEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string[],
    BigNumber[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  {
    offerId: BigNumber;
    marketplaceId: BigNumber;
    nfts: string[];
    tokenIds: BigNumber[];
    from: string;
    quantity: BigNumber;
    price: BigNumber;
    expires: BigNumber;
    searchKeywords: string;
  }
>;

export type NewOfferEventFilter = TypedEventFilter<NewOfferEvent>;

export type NewSaleEvent = TypedEvent<
  [
    BigNumber,
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    boolean,
    BigNumber,
    boolean,
    string,
    string[],
    string
  ],
  {
    marketplaceId: BigNumber;
    nfts: string[];
    tokenIds: BigNumber[];
    amountBatches: BigNumber[];
    price: BigNumber;
    duration: BigNumber;
    isAuction: boolean;
    antisnipe: boolean;
    flashAuction: boolean;
    amount: BigNumber;
    isNSFW: boolean;
    searchKeywords: string;
    addresses: string[];
    seller: string;
  }
>;

export type NewSaleEventFilter = TypedEventFilter<NewSaleEvent>;

export type NewSaleBatchEvent = TypedEvent<
  [
    BigNumber[],
    string[][],
    BigNumber[][],
    BigNumber[][],
    BigNumber[],
    BigNumber[],
    boolean[],
    boolean[],
    BigNumber[],
    boolean[],
    string[],
    string[][],
    string[]
  ],
  {
    marketplaceId: BigNumber[];
    nfts: string[][];
    tokenIds: BigNumber[][];
    amountBatches: BigNumber[][];
    prices: BigNumber[];
    durations: BigNumber[];
    isAuctions: boolean[];
    isAntisnipes: boolean[];
    amounts: BigNumber[];
    isNSFWs: boolean[];
    searchKeywords: string[];
    addresses: string[][];
    sellers: string[];
  }
>;

export type NewSaleBatchEventFilter = TypedEventFilter<NewSaleBatchEvent>;

export type NewTempListingEvent = TypedEvent<
  [
    BigNumber,
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    boolean,
    BigNumber,
    boolean,
    string,
    string[],
    string
  ],
  {
    marketplaceId: BigNumber;
    nfts: string[];
    tokenIds: BigNumber[];
    amountBatches: BigNumber[];
    price: BigNumber;
    duration: BigNumber;
    isAuction: boolean;
    antisnipe: boolean;
    flashAuction: boolean;
    amount: BigNumber;
    isNSFW: boolean;
    searchKeywords: string;
    addresses: string[];
    seller: string;
  }
>;

export type NewTempListingEventFilter = TypedEventFilter<NewTempListingEvent>;

export type OfferAcceptedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    offerId: BigNumber;
    nft: string;
    tokenId: BigNumber;
    quantity: BigNumber;
    marketplaceId: BigNumber;
  }
>;

export type OfferAcceptedEventFilter = TypedEventFilter<OfferAcceptedEvent>;

export type OfferCompletedEvent = TypedEvent<
  [BigNumber],
  { offerId: BigNumber }
>;

export type OfferCompletedEventFilter = TypedEventFilter<OfferCompletedEvent>;

export type OfferExpiredEvent = TypedEvent<[BigNumber], { offerId: BigNumber }>;

export type OfferExpiredEventFilter = TypedEventFilter<OfferExpiredEvent>;

export type OfferRemovedEvent = TypedEvent<[BigNumber], { offerId: BigNumber }>;

export type OfferRemovedEventFilter = TypedEventFilter<OfferRemovedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RemoveExpiredListingEvent = TypedEvent<
  [BigNumber],
  { _marketplaceId: BigNumber }
>;

export type RemoveExpiredListingEventFilter =
  TypedEventFilter<RemoveExpiredListingEvent>;

export type RemovedVaultFactoryEvent = TypedEvent<
  [string],
  { _factory: string }
>;

export type RemovedVaultFactoryEventFilter =
  TypedEventFilter<RemovedVaultFactoryEvent>;

export type SaleFinishedEvent = TypedEvent<
  [BigNumber],
  { marketplaceId: BigNumber }
>;

export type SaleFinishedEventFilter = TypedEventFilter<SaleFinishedEvent>;

export type SoldEvent = TypedEvent<
  [
    BigNumber,
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ],
  {
    marketplaceId: BigNumber;
    nfts: string[];
    tokenIds: BigNumber[];
    amountBatches: BigNumber[];
    price: BigNumber;
    buyer: string;
    seller: string;
    amount: BigNumber;
    offerId: BigNumber;
  }
>;

export type SoldEventFilter = TypedEventFilter<SoldEvent>;

export type UpdateEndTimeEvent = TypedEvent<
  [BigNumber, BigNumber],
  { marketplaceId: BigNumber; endTime: BigNumber }
>;

export type UpdateEndTimeEventFilter = TypedEventFilter<UpdateEndTimeEvent>;

export type UpdateOfferEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    offerId: BigNumber;
    nft: string;
    tokenId: BigNumber;
    quantity: BigNumber;
    newPrice: BigNumber;
    expires: BigNumber;
  }
>;

export type UpdateOfferEventFilter = TypedEventFilter<UpdateOfferEvent>;

export type UpdatePriceEvent = TypedEvent<
  [BigNumber, BigNumber, string[], BigNumber[]],
  {
    marketplaceId: BigNumber;
    price: BigNumber;
    nfts: string[];
    tokenIds: BigNumber[];
  }
>;

export type UpdatePriceEventFilter = TypedEventFilter<UpdatePriceEvent>;

export type UpdateQuantityEvent = TypedEvent<
  [BigNumber, string[], BigNumber[], BigNumber, BigNumber],
  {
    marketplaceId: BigNumber;
    nfts: string[];
    tokenIds: BigNumber[];
    newAmount: BigNumber;
    newAmountRemaining: BigNumber;
  }
>;

export type UpdateQuantityEventFilter = TypedEventFilter<UpdateQuantityEvent>;

export type UpdateStartTimeEvent = TypedEvent<
  [BigNumber, BigNumber],
  { marketplaceId: BigNumber; startTime: BigNumber }
>;

export type UpdateStartTimeEventFilter = TypedEventFilter<UpdateStartTimeEvent>;

export interface PaintSwapV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PaintSwapV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOffer(
      _offerId: BigNumberish,
      _nft: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _searchKeywords: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptOfferBatch(
      _offerIds: BigNumberish[],
      _nfts: string[],
      _tokenIdOrMarketplaceIds: BigNumberish[],
      _isMarketplaceIds: boolean[],
      _quantities: BigNumberish[],
      _searchKeywords: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptOnSaleOffer(
      _offerId: BigNumberish,
      _quantity: BigNumberish,
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSale(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _amountBatches: BigNumberish[],
      _price: BigNumberish,
      _times: BigNumberish[],
      _amount: BigNumberish,
      _flags: boolean[],
      _searchKeywords: string,
      _addresses: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSaleBatch(
      _nfts: string[][],
      _tokenIds: BigNumberish[][],
      _amountBatches: BigNumberish[][],
      _prices: BigNumberish[],
      _times: BigNumberish[][],
      _amounts: BigNumberish[],
      _flags: boolean[][],
      _searchKeywords: string[],
      _addresses: string[][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addValidVaultFactory(
      _vaultFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctionEndTimeIncreaseCutOff(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auctionGracePeriodForCancelling(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buy(
      _marketplaceId: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyBatch(
      _marketplaceIds: BigNumberish[],
      _amounts: BigNumberish[],
      _allowFailures: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOffer(
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOfferBatch(
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSale(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSaleBatch(
      _marketplaceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeMarketplaceEntry(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentMarketplaceId(overrides?: CallOverrides): Promise<[BigNumber]>;

    devFeeAddress(overrides?: CallOverrides): Promise<[string]>;

    editOffer(
      _offerId: BigNumberish,
      _nft: string,
      _tokenId: BigNumberish,
      _newQuantity: BigNumberish,
      _newOfferPrice: BigNumberish,
      _newOfferDuration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editOfferBatch(
      _offerIds: BigNumberish[],
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _newQuantities: BigNumberish[],
      _newOfferPrices: BigNumberish[],
      _newOfferDurations: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editPrice(
      _marketplaceId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editPriceAndQuantity(
      _marketplaceId: BigNumberish,
      _newPrice: BigNumberish,
      _newQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editPriceAndQuantityBatch(
      _marketplaceId: BigNumberish[],
      _newPrices: BigNumberish[],
      _newQuantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editPriceBatch(
      _marketplaceIds: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editQuantity(
      _marketplaceId: BigNumberish,
      _newQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editQuantityBatch(
      _marketplaceIds: BigNumberish[],
      _newQuantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expireOffers(
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashAuctionEndTimeIncreaseCutOff(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    flashAuctionGracePeriodForCancelling(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OfferStructOutput]>;

    getSaleDetails(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[FullDetailsStructOutput]>;

    hasExistingActiveOffers(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    makeAltOffer(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _quantity: BigNumberish,
      _prices: BigNumberish[],
      _duration: BigNumberish,
      _searchKeywords: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeBid(
      _marketplaceId: BigNumberish,
      _bid: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeBidBatch(
      _marketplaceIds: BigNumberish[],
      _bids: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeCollectionOffer(
      _nft: string,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      _searchKeywords: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeFilteredCollectionOffer(
      _nft: string,
      _tokenIds: BigNumberish[],
      _quantity: BigNumberish,
      _prices: BigNumberish[],
      _duration: BigNumberish,
      _searchKeywords: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeFilteredCollectionOfferBatch(
      _nfts: string[],
      _tokenIds: BigNumberish[][],
      _quantities: BigNumberish[],
      _prices: BigNumberish[][],
      _durations: BigNumberish[],
      _searchKeywords: string[][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeOffer(
      _marketplaceId: BigNumberish,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeOfferBatch(
      _marketplaceIds: BigNumberish[],
      _quantities: BigNumberish[],
      _prices: BigNumberish[],
      _durations: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeOfferSingle(
      _nft: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      _searchKeywords: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeOfferSingleBatch(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _quantities: BigNumberish[],
      _prices: BigNumberish[],
      _durations: BigNumberish[],
      _searchKeywords: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxActiveOfferCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxOfferDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxStartTimeIncrement(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAuctionDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    minFlashAuctionDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    minIncreasedBidPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    minOfferDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    minVaultVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextMinimumBid(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offerCounts(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    offerId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeInvalidVaultFactory(
      _vaultFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserve1(
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserve2(
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserve3(
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserve4(
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveOnlyOwner(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeNFTTransferBulk(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _tos: string[],
      _amounts: BigNumberish[],
      _chainId: BigNumberish,
      _destinations: string[],
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeNFTTransferBulkOrdered(
      _nftsInfo: BulkTransferInfoStruct[],
      _chainId: BigNumberish,
      _destination: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salesFeeAddress(overrides?: CallOverrides): Promise<[string]>;

    setBundles(
      _maxBundleNumber: BigNumberish,
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDurations(
      _minDuration: BigNumberish,
      _maxDuration: BigNumberish,
      _minAuctionDuration: BigNumberish,
      _minFlashAuctionDuration: BigNumberish,
      _maxAuctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnableSelling(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeAddresses(
      _dev: string,
      _salesFee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeePercentage(
      _feePercentage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setImplBatchTransferNFT(
      _implBatchTransferNFT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setImplBidsAndAcceptOffers(
      _implBidsAndAcceptOffers: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setImplBuyEditListing(
      _implBuyEditListing: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setImplListAndComplete(
      _implListAndComplete: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxActiveOfferCountAndMinVaultVersion(
      _maxActiveOfferCount: BigNumberish,
      _minVaultVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOfferDuration(
      _minDuration: BigNumberish,
      _maxDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVarious(
      _maxRoyalty: BigNumberish,
      _maxStartTimeIncrement: BigNumberish,
      _officialNFTDiscount: string,
      _callGasLimit: BigNumberish,
      _paintRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVariousTimes(
      _auctionGracePeriodForCancelling: BigNumberish,
      _flashAuctionGracePeriodForCancelling: BigNumberish,
      _auctionEndTimeIncreaseCutOff: BigNumberish,
      _flashAuctionEndTimeIncreaseCutOff: BigNumberish,
      _minIncreasedBidPercent: BigNumberish,
      _modifyInitialStartTime: boolean,
      _modifyPostStartTime: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setimplMakeAndEditOffers(
      _implMakeAndEditOffers: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    singleNFTListings(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userAltOffersMade(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userBundleOffersMade(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userCollectionOffersMade(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userFilteredCollectionOffersMade(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userOffersMade(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOffer(
    _offerId: BigNumberish,
    _nft: string,
    _tokenId: BigNumberish,
    _quantity: BigNumberish,
    _searchKeywords: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptOfferBatch(
    _offerIds: BigNumberish[],
    _nfts: string[],
    _tokenIdOrMarketplaceIds: BigNumberish[],
    _isMarketplaceIds: boolean[],
    _quantities: BigNumberish[],
    _searchKeywords: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptOnSaleOffer(
    _offerId: BigNumberish,
    _quantity: BigNumberish,
    _marketplaceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSale(
    _nfts: string[],
    _tokenIds: BigNumberish[],
    _amountBatches: BigNumberish[],
    _price: BigNumberish,
    _times: BigNumberish[],
    _amount: BigNumberish,
    _flags: boolean[],
    _searchKeywords: string,
    _addresses: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSaleBatch(
    _nfts: string[][],
    _tokenIds: BigNumberish[][],
    _amountBatches: BigNumberish[][],
    _prices: BigNumberish[],
    _times: BigNumberish[][],
    _amounts: BigNumberish[],
    _flags: boolean[][],
    _searchKeywords: string[],
    _addresses: string[][],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addValidVaultFactory(
    _vaultFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctionEndTimeIncreaseCutOff(overrides?: CallOverrides): Promise<BigNumber>;

  auctionGracePeriodForCancelling(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buy(
    _marketplaceId: BigNumberish,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyBatch(
    _marketplaceIds: BigNumberish[],
    _amounts: BigNumberish[],
    _allowFailures: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOffer(
    _offerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOfferBatch(
    _offerIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSale(
    _marketplaceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSaleBatch(
    _marketplaceIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeMarketplaceEntry(
    _marketplaceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentMarketplaceId(overrides?: CallOverrides): Promise<BigNumber>;

  devFeeAddress(overrides?: CallOverrides): Promise<string>;

  editOffer(
    _offerId: BigNumberish,
    _nft: string,
    _tokenId: BigNumberish,
    _newQuantity: BigNumberish,
    _newOfferPrice: BigNumberish,
    _newOfferDuration: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editOfferBatch(
    _offerIds: BigNumberish[],
    _nfts: string[],
    _tokenIds: BigNumberish[],
    _newQuantities: BigNumberish[],
    _newOfferPrices: BigNumberish[],
    _newOfferDurations: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editPrice(
    _marketplaceId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editPriceAndQuantity(
    _marketplaceId: BigNumberish,
    _newPrice: BigNumberish,
    _newQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editPriceAndQuantityBatch(
    _marketplaceId: BigNumberish[],
    _newPrices: BigNumberish[],
    _newQuantities: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editPriceBatch(
    _marketplaceIds: BigNumberish[],
    _prices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editQuantity(
    _marketplaceId: BigNumberish,
    _newQuantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editQuantityBatch(
    _marketplaceIds: BigNumberish[],
    _newQuantities: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expireOffers(
    _offerIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashAuctionEndTimeIncreaseCutOff(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  flashAuctionGracePeriodForCancelling(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOffer(
    _offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OfferStructOutput>;

  getSaleDetails(
    _marketplaceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<FullDetailsStructOutput>;

  hasExistingActiveOffers(
    _nfts: string[],
    _tokenIds: BigNumberish[],
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  makeAltOffer(
    _nfts: string[],
    _tokenIds: BigNumberish[],
    _quantity: BigNumberish,
    _prices: BigNumberish[],
    _duration: BigNumberish,
    _searchKeywords: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeBid(
    _marketplaceId: BigNumberish,
    _bid: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeBidBatch(
    _marketplaceIds: BigNumberish[],
    _bids: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeCollectionOffer(
    _nft: string,
    _quantity: BigNumberish,
    _price: BigNumberish,
    _duration: BigNumberish,
    _searchKeywords: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeFilteredCollectionOffer(
    _nft: string,
    _tokenIds: BigNumberish[],
    _quantity: BigNumberish,
    _prices: BigNumberish[],
    _duration: BigNumberish,
    _searchKeywords: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeFilteredCollectionOfferBatch(
    _nfts: string[],
    _tokenIds: BigNumberish[][],
    _quantities: BigNumberish[],
    _prices: BigNumberish[][],
    _durations: BigNumberish[],
    _searchKeywords: string[][],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeOffer(
    _marketplaceId: BigNumberish,
    _quantity: BigNumberish,
    _price: BigNumberish,
    _duration: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeOfferBatch(
    _marketplaceIds: BigNumberish[],
    _quantities: BigNumberish[],
    _prices: BigNumberish[],
    _durations: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeOfferSingle(
    _nft: string,
    _tokenId: BigNumberish,
    _quantity: BigNumberish,
    _price: BigNumberish,
    _duration: BigNumberish,
    _searchKeywords: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeOfferSingleBatch(
    _nfts: string[],
    _tokenIds: BigNumberish[],
    _quantities: BigNumberish[],
    _prices: BigNumberish[],
    _durations: BigNumberish[],
    _searchKeywords: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxActiveOfferCount(overrides?: CallOverrides): Promise<BigNumber>;

  maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  maxDuration(overrides?: CallOverrides): Promise<BigNumber>;

  maxOfferDuration(overrides?: CallOverrides): Promise<BigNumber>;

  maxStartTimeIncrement(overrides?: CallOverrides): Promise<BigNumber>;

  minAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  minDuration(overrides?: CallOverrides): Promise<BigNumber>;

  minFlashAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  minIncreasedBidPercent(overrides?: CallOverrides): Promise<BigNumber>;

  minOfferDuration(overrides?: CallOverrides): Promise<BigNumber>;

  minVaultVersion(overrides?: CallOverrides): Promise<BigNumber>;

  nextMinimumBid(
    _marketplaceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  offerCounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  offerId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeInvalidVaultFactory(
    _vaultFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserve1(
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserve2(
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserve3(
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserve4(
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveOnlyOwner(
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeNFTTransferBulk(
    _nfts: string[],
    _tokenIds: BigNumberish[],
    _tos: string[],
    _amounts: BigNumberish[],
    _chainId: BigNumberish,
    _destinations: string[],
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeNFTTransferBulkOrdered(
    _nftsInfo: BulkTransferInfoStruct[],
    _chainId: BigNumberish,
    _destination: string,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salesFeeAddress(overrides?: CallOverrides): Promise<string>;

  setBundles(
    _maxBundleNumber: BigNumberish,
    _enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDurations(
    _minDuration: BigNumberish,
    _maxDuration: BigNumberish,
    _minAuctionDuration: BigNumberish,
    _minFlashAuctionDuration: BigNumberish,
    _maxAuctionDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnableSelling(
    _enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeAddresses(
    _dev: string,
    _salesFee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeePercentage(
    _feePercentage: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setImplBatchTransferNFT(
    _implBatchTransferNFT: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setImplBidsAndAcceptOffers(
    _implBidsAndAcceptOffers: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setImplBuyEditListing(
    _implBuyEditListing: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setImplListAndComplete(
    _implListAndComplete: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxActiveOfferCountAndMinVaultVersion(
    _maxActiveOfferCount: BigNumberish,
    _minVaultVersion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOfferDuration(
    _minDuration: BigNumberish,
    _maxDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVarious(
    _maxRoyalty: BigNumberish,
    _maxStartTimeIncrement: BigNumberish,
    _officialNFTDiscount: string,
    _callGasLimit: BigNumberish,
    _paintRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVariousTimes(
    _auctionGracePeriodForCancelling: BigNumberish,
    _flashAuctionGracePeriodForCancelling: BigNumberish,
    _auctionEndTimeIncreaseCutOff: BigNumberish,
    _flashAuctionEndTimeIncreaseCutOff: BigNumberish,
    _minIncreasedBidPercent: BigNumberish,
    _modifyInitialStartTime: boolean,
    _modifyPostStartTime: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setimplMakeAndEditOffers(
    _implMakeAndEditOffers: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  singleNFTListings(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userAltOffersMade(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userBundleOffersMade(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userCollectionOffersMade(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userFilteredCollectionOffersMade(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userOffersMade(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOffer(
      _offerId: BigNumberish,
      _nft: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _searchKeywords: string,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOfferBatch(
      _offerIds: BigNumberish[],
      _nfts: string[],
      _tokenIdOrMarketplaceIds: BigNumberish[],
      _isMarketplaceIds: boolean[],
      _quantities: BigNumberish[],
      _searchKeywords: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOnSaleOffer(
      _offerId: BigNumberish,
      _quantity: BigNumberish,
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addSale(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _amountBatches: BigNumberish[],
      _price: BigNumberish,
      _times: BigNumberish[],
      _amount: BigNumberish,
      _flags: boolean[],
      _searchKeywords: string,
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addSaleBatch(
      _nfts: string[][],
      _tokenIds: BigNumberish[][],
      _amountBatches: BigNumberish[][],
      _prices: BigNumberish[],
      _times: BigNumberish[][],
      _amounts: BigNumberish[],
      _flags: boolean[][],
      _searchKeywords: string[],
      _addresses: string[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addValidVaultFactory(
      _vaultFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionEndTimeIncreaseCutOff(overrides?: CallOverrides): Promise<BigNumber>;

    auctionGracePeriodForCancelling(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      _marketplaceId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyBatch(
      _marketplaceIds: BigNumberish[],
      _amounts: BigNumberish[],
      _allowFailures: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOfferBatch(
      _offerIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSale(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSaleBatch(
      _marketplaceIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    completeMarketplaceEntry(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentMarketplaceId(overrides?: CallOverrides): Promise<BigNumber>;

    devFeeAddress(overrides?: CallOverrides): Promise<string>;

    editOffer(
      _offerId: BigNumberish,
      _nft: string,
      _tokenId: BigNumberish,
      _newQuantity: BigNumberish,
      _newOfferPrice: BigNumberish,
      _newOfferDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    editOfferBatch(
      _offerIds: BigNumberish[],
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _newQuantities: BigNumberish[],
      _newOfferPrices: BigNumberish[],
      _newOfferDurations: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    editPrice(
      _marketplaceId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    editPriceAndQuantity(
      _marketplaceId: BigNumberish,
      _newPrice: BigNumberish,
      _newQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    editPriceAndQuantityBatch(
      _marketplaceId: BigNumberish[],
      _newPrices: BigNumberish[],
      _newQuantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    editPriceBatch(
      _marketplaceIds: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    editQuantity(
      _marketplaceId: BigNumberish,
      _newQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    editQuantityBatch(
      _marketplaceIds: BigNumberish[],
      _newQuantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    expireOffers(
      _offerIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    flashAuctionEndTimeIncreaseCutOff(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashAuctionGracePeriodForCancelling(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OfferStructOutput>;

    getSaleDetails(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<FullDetailsStructOutput>;

    hasExistingActiveOffers(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    makeAltOffer(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _quantity: BigNumberish,
      _prices: BigNumberish[],
      _duration: BigNumberish,
      _searchKeywords: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    makeBid(
      _marketplaceId: BigNumberish,
      _bid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeBidBatch(
      _marketplaceIds: BigNumberish[],
      _bids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    makeCollectionOffer(
      _nft: string,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      _searchKeywords: string,
      overrides?: CallOverrides
    ): Promise<void>;

    makeFilteredCollectionOffer(
      _nft: string,
      _tokenIds: BigNumberish[],
      _quantity: BigNumberish,
      _prices: BigNumberish[],
      _duration: BigNumberish,
      _searchKeywords: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    makeFilteredCollectionOfferBatch(
      _nfts: string[],
      _tokenIds: BigNumberish[][],
      _quantities: BigNumberish[],
      _prices: BigNumberish[][],
      _durations: BigNumberish[],
      _searchKeywords: string[][],
      overrides?: CallOverrides
    ): Promise<void>;

    makeOffer(
      _marketplaceId: BigNumberish,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeOfferBatch(
      _marketplaceIds: BigNumberish[],
      _quantities: BigNumberish[],
      _prices: BigNumberish[],
      _durations: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    makeOfferSingle(
      _nft: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      _searchKeywords: string,
      overrides?: CallOverrides
    ): Promise<void>;

    makeOfferSingleBatch(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _quantities: BigNumberish[],
      _prices: BigNumberish[],
      _durations: BigNumberish[],
      _searchKeywords: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    maxActiveOfferCount(overrides?: CallOverrides): Promise<BigNumber>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxOfferDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxStartTimeIncrement(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minFlashAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minIncreasedBidPercent(overrides?: CallOverrides): Promise<BigNumber>;

    minOfferDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minVaultVersion(overrides?: CallOverrides): Promise<BigNumber>;

    nextMinimumBid(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerCounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    offerId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeInvalidVaultFactory(
      _vaultFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserve1(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    reserve2(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    reserve3(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    reserve4(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    reserveOnlyOwner(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeNFTTransferBulk(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _tos: string[],
      _amounts: BigNumberish[],
      _chainId: BigNumberish,
      _destinations: string[],
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeNFTTransferBulkOrdered(
      _nftsInfo: BulkTransferInfoStruct[],
      _chainId: BigNumberish,
      _destination: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    salesFeeAddress(overrides?: CallOverrides): Promise<string>;

    setBundles(
      _maxBundleNumber: BigNumberish,
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDurations(
      _minDuration: BigNumberish,
      _maxDuration: BigNumberish,
      _minAuctionDuration: BigNumberish,
      _minFlashAuctionDuration: BigNumberish,
      _maxAuctionDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnableSelling(
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeAddresses(
      _dev: string,
      _salesFee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeePercentage(
      _feePercentage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setImplBatchTransferNFT(
      _implBatchTransferNFT: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setImplBidsAndAcceptOffers(
      _implBidsAndAcceptOffers: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setImplBuyEditListing(
      _implBuyEditListing: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setImplListAndComplete(
      _implListAndComplete: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxActiveOfferCountAndMinVaultVersion(
      _maxActiveOfferCount: BigNumberish,
      _minVaultVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOfferDuration(
      _minDuration: BigNumberish,
      _maxDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVarious(
      _maxRoyalty: BigNumberish,
      _maxStartTimeIncrement: BigNumberish,
      _officialNFTDiscount: string,
      _callGasLimit: BigNumberish,
      _paintRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVariousTimes(
      _auctionGracePeriodForCancelling: BigNumberish,
      _flashAuctionGracePeriodForCancelling: BigNumberish,
      _auctionEndTimeIncreaseCutOff: BigNumberish,
      _flashAuctionEndTimeIncreaseCutOff: BigNumberish,
      _minIncreasedBidPercent: BigNumberish,
      _modifyInitialStartTime: boolean,
      _modifyPostStartTime: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setimplMakeAndEditOffers(
      _implMakeAndEditOffers: string,
      overrides?: CallOverrides
    ): Promise<void>;

    singleNFTListings(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userAltOffersMade(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBundleOffersMade(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCollectionOffersMade(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userFilteredCollectionOffersMade(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOffersMade(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddedVaultFactory(address)"(_factory?: null): AddedVaultFactoryEventFilter;
    AddedVaultFactory(_factory?: null): AddedVaultFactoryEventFilter;

    "CancelledSale(uint256,address[],uint256[],uint256[])"(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null
    ): CancelledSaleEventFilter;
    CancelledSale(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null
    ): CancelledSaleEventFilter;

    "NewBid(uint256,address,uint128,uint256)"(
      marketplaceId?: null,
      bidder?: string | null,
      bid?: null,
      nextMinimum?: null
    ): NewBidEventFilter;
    NewBid(
      marketplaceId?: null,
      bidder?: string | null,
      bid?: null,
      nextMinimum?: null
    ): NewBidEventFilter;

    "NewCollectionOffer(uint256,address,address,uint128,uint128,uint256,string)"(
      offerId?: null,
      nft?: null,
      from?: string | null,
      quantity?: null,
      price?: null,
      expires?: null,
      searchKeywords?: null
    ): NewCollectionOfferEventFilter;
    NewCollectionOffer(
      offerId?: null,
      nft?: null,
      from?: string | null,
      quantity?: null,
      price?: null,
      expires?: null,
      searchKeywords?: null
    ): NewCollectionOfferEventFilter;

    "NewFilteredCollectionOffer(uint256,address,uint256[],address,uint128,uint128,uint128[],uint256,string[])"(
      offerId?: null,
      nft?: null,
      tokenIds?: null,
      from?: string | null,
      quantity?: null,
      price?: null,
      prices?: null,
      expires?: null,
      searchKeywords?: null
    ): NewFilteredCollectionOfferEventFilter;
    NewFilteredCollectionOffer(
      offerId?: null,
      nft?: null,
      tokenIds?: null,
      from?: string | null,
      quantity?: null,
      price?: null,
      prices?: null,
      expires?: null,
      searchKeywords?: null
    ): NewFilteredCollectionOfferEventFilter;

    "NewOffer(uint256,uint256,address[],uint256[],address,uint128,uint128,uint256,string)"(
      offerId?: null,
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      from?: string | null,
      quantity?: null,
      price?: null,
      expires?: null,
      searchKeywords?: null
    ): NewOfferEventFilter;
    NewOffer(
      offerId?: null,
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      from?: string | null,
      quantity?: null,
      price?: null,
      expires?: null,
      searchKeywords?: null
    ): NewOfferEventFilter;

    "NewSale(uint256,address[],uint256[],uint256[],uint128,uint256,bool,bool,bool,uint256,bool,string,address[],address)"(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      price?: null,
      duration?: null,
      isAuction?: null,
      antisnipe?: null,
      flashAuction?: null,
      amount?: null,
      isNSFW?: null,
      searchKeywords?: null,
      addresses?: null,
      seller?: null
    ): NewSaleEventFilter;
    NewSale(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      price?: null,
      duration?: null,
      isAuction?: null,
      antisnipe?: null,
      flashAuction?: null,
      amount?: null,
      isNSFW?: null,
      searchKeywords?: null,
      addresses?: null,
      seller?: null
    ): NewSaleEventFilter;

    "NewSaleBatch(uint256[],address[][],uint256[][],uint256[][],uint128[],uint256[],bool[],bool[],uint256[],bool[],string[],address[][],address[])"(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      prices?: null,
      durations?: null,
      isAuctions?: null,
      isAntisnipes?: null,
      amounts?: null,
      isNSFWs?: null,
      searchKeywords?: null,
      addresses?: null,
      sellers?: null
    ): NewSaleBatchEventFilter;
    NewSaleBatch(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      prices?: null,
      durations?: null,
      isAuctions?: null,
      isAntisnipes?: null,
      amounts?: null,
      isNSFWs?: null,
      searchKeywords?: null,
      addresses?: null,
      sellers?: null
    ): NewSaleBatchEventFilter;

    "NewTempListing(uint256,address[],uint256[],uint256[],uint128,uint256,bool,bool,bool,uint256,bool,string,address[],address)"(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      price?: null,
      duration?: null,
      isAuction?: null,
      antisnipe?: null,
      flashAuction?: null,
      amount?: null,
      isNSFW?: null,
      searchKeywords?: null,
      addresses?: null,
      seller?: null
    ): NewTempListingEventFilter;
    NewTempListing(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      price?: null,
      duration?: null,
      isAuction?: null,
      antisnipe?: null,
      flashAuction?: null,
      amount?: null,
      isNSFW?: null,
      searchKeywords?: null,
      addresses?: null,
      seller?: null
    ): NewTempListingEventFilter;

    "OfferAccepted(uint256,address,uint256,uint128,uint256)"(
      offerId?: null,
      nft?: null,
      tokenId?: null,
      quantity?: null,
      marketplaceId?: null
    ): OfferAcceptedEventFilter;
    OfferAccepted(
      offerId?: null,
      nft?: null,
      tokenId?: null,
      quantity?: null,
      marketplaceId?: null
    ): OfferAcceptedEventFilter;

    "OfferCompleted(uint256)"(offerId?: null): OfferCompletedEventFilter;
    OfferCompleted(offerId?: null): OfferCompletedEventFilter;

    "OfferExpired(uint256)"(offerId?: null): OfferExpiredEventFilter;
    OfferExpired(offerId?: null): OfferExpiredEventFilter;

    "OfferRemoved(uint256)"(offerId?: null): OfferRemovedEventFilter;
    OfferRemoved(offerId?: null): OfferRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RemoveExpiredListing(uint256)"(
      _marketplaceId?: null
    ): RemoveExpiredListingEventFilter;
    RemoveExpiredListing(
      _marketplaceId?: null
    ): RemoveExpiredListingEventFilter;

    "RemovedVaultFactory(address)"(
      _factory?: null
    ): RemovedVaultFactoryEventFilter;
    RemovedVaultFactory(_factory?: null): RemovedVaultFactoryEventFilter;

    "SaleFinished(uint256)"(marketplaceId?: null): SaleFinishedEventFilter;
    SaleFinished(marketplaceId?: null): SaleFinishedEventFilter;

    "Sold(uint256,address[],uint256[],uint256[],uint128,address,address,uint256,uint256)"(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      price?: null,
      buyer?: null,
      seller?: null,
      amount?: null,
      offerId?: null
    ): SoldEventFilter;
    Sold(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      amountBatches?: null,
      price?: null,
      buyer?: null,
      seller?: null,
      amount?: null,
      offerId?: null
    ): SoldEventFilter;

    "UpdateEndTime(uint256,uint256)"(
      marketplaceId?: null,
      endTime?: null
    ): UpdateEndTimeEventFilter;
    UpdateEndTime(
      marketplaceId?: null,
      endTime?: null
    ): UpdateEndTimeEventFilter;

    "UpdateOffer(uint256,address,uint256,uint128,uint128,uint256)"(
      offerId?: null,
      nft?: null,
      tokenId?: null,
      quantity?: null,
      newPrice?: null,
      expires?: null
    ): UpdateOfferEventFilter;
    UpdateOffer(
      offerId?: null,
      nft?: null,
      tokenId?: null,
      quantity?: null,
      newPrice?: null,
      expires?: null
    ): UpdateOfferEventFilter;

    "UpdatePrice(uint256,uint128,address[],uint256[])"(
      marketplaceId?: null,
      price?: null,
      nfts?: null,
      tokenIds?: null
    ): UpdatePriceEventFilter;
    UpdatePrice(
      marketplaceId?: null,
      price?: null,
      nfts?: null,
      tokenIds?: null
    ): UpdatePriceEventFilter;

    "UpdateQuantity(uint256,address[],uint256[],uint256,uint256)"(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      newAmount?: null,
      newAmountRemaining?: null
    ): UpdateQuantityEventFilter;
    UpdateQuantity(
      marketplaceId?: null,
      nfts?: null,
      tokenIds?: null,
      newAmount?: null,
      newAmountRemaining?: null
    ): UpdateQuantityEventFilter;

    "UpdateStartTime(uint256,uint256)"(
      marketplaceId?: null,
      startTime?: null
    ): UpdateStartTimeEventFilter;
    UpdateStartTime(
      marketplaceId?: null,
      startTime?: null
    ): UpdateStartTimeEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOffer(
      _offerId: BigNumberish,
      _nft: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _searchKeywords: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptOfferBatch(
      _offerIds: BigNumberish[],
      _nfts: string[],
      _tokenIdOrMarketplaceIds: BigNumberish[],
      _isMarketplaceIds: boolean[],
      _quantities: BigNumberish[],
      _searchKeywords: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptOnSaleOffer(
      _offerId: BigNumberish,
      _quantity: BigNumberish,
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSale(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _amountBatches: BigNumberish[],
      _price: BigNumberish,
      _times: BigNumberish[],
      _amount: BigNumberish,
      _flags: boolean[],
      _searchKeywords: string,
      _addresses: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSaleBatch(
      _nfts: string[][],
      _tokenIds: BigNumberish[][],
      _amountBatches: BigNumberish[][],
      _prices: BigNumberish[],
      _times: BigNumberish[][],
      _amounts: BigNumberish[],
      _flags: boolean[][],
      _searchKeywords: string[],
      _addresses: string[][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addValidVaultFactory(
      _vaultFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctionEndTimeIncreaseCutOff(overrides?: CallOverrides): Promise<BigNumber>;

    auctionGracePeriodForCancelling(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      _marketplaceId: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyBatch(
      _marketplaceIds: BigNumberish[],
      _amounts: BigNumberish[],
      _allowFailures: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOffer(
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOfferBatch(
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSale(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSaleBatch(
      _marketplaceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeMarketplaceEntry(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentMarketplaceId(overrides?: CallOverrides): Promise<BigNumber>;

    devFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    editOffer(
      _offerId: BigNumberish,
      _nft: string,
      _tokenId: BigNumberish,
      _newQuantity: BigNumberish,
      _newOfferPrice: BigNumberish,
      _newOfferDuration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editOfferBatch(
      _offerIds: BigNumberish[],
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _newQuantities: BigNumberish[],
      _newOfferPrices: BigNumberish[],
      _newOfferDurations: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editPrice(
      _marketplaceId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editPriceAndQuantity(
      _marketplaceId: BigNumberish,
      _newPrice: BigNumberish,
      _newQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editPriceAndQuantityBatch(
      _marketplaceId: BigNumberish[],
      _newPrices: BigNumberish[],
      _newQuantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editPriceBatch(
      _marketplaceIds: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editQuantity(
      _marketplaceId: BigNumberish,
      _newQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editQuantityBatch(
      _marketplaceIds: BigNumberish[],
      _newQuantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expireOffers(
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashAuctionEndTimeIncreaseCutOff(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashAuctionGracePeriodForCancelling(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleDetails(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasExistingActiveOffers(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeAltOffer(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _quantity: BigNumberish,
      _prices: BigNumberish[],
      _duration: BigNumberish,
      _searchKeywords: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeBid(
      _marketplaceId: BigNumberish,
      _bid: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeBidBatch(
      _marketplaceIds: BigNumberish[],
      _bids: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeCollectionOffer(
      _nft: string,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      _searchKeywords: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeFilteredCollectionOffer(
      _nft: string,
      _tokenIds: BigNumberish[],
      _quantity: BigNumberish,
      _prices: BigNumberish[],
      _duration: BigNumberish,
      _searchKeywords: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeFilteredCollectionOfferBatch(
      _nfts: string[],
      _tokenIds: BigNumberish[][],
      _quantities: BigNumberish[],
      _prices: BigNumberish[][],
      _durations: BigNumberish[],
      _searchKeywords: string[][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeOffer(
      _marketplaceId: BigNumberish,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeOfferBatch(
      _marketplaceIds: BigNumberish[],
      _quantities: BigNumberish[],
      _prices: BigNumberish[],
      _durations: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeOfferSingle(
      _nft: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      _searchKeywords: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeOfferSingleBatch(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _quantities: BigNumberish[],
      _prices: BigNumberish[],
      _durations: BigNumberish[],
      _searchKeywords: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxActiveOfferCount(overrides?: CallOverrides): Promise<BigNumber>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxOfferDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxStartTimeIncrement(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minFlashAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minIncreasedBidPercent(overrides?: CallOverrides): Promise<BigNumber>;

    minOfferDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minVaultVersion(overrides?: CallOverrides): Promise<BigNumber>;

    nextMinimumBid(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerCounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    offerId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeInvalidVaultFactory(
      _vaultFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserve1(
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserve2(
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserve3(
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserve4(
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveOnlyOwner(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeNFTTransferBulk(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _tos: string[],
      _amounts: BigNumberish[],
      _chainId: BigNumberish,
      _destinations: string[],
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeNFTTransferBulkOrdered(
      _nftsInfo: BulkTransferInfoStruct[],
      _chainId: BigNumberish,
      _destination: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salesFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setBundles(
      _maxBundleNumber: BigNumberish,
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDurations(
      _minDuration: BigNumberish,
      _maxDuration: BigNumberish,
      _minAuctionDuration: BigNumberish,
      _minFlashAuctionDuration: BigNumberish,
      _maxAuctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnableSelling(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeAddresses(
      _dev: string,
      _salesFee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeePercentage(
      _feePercentage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setImplBatchTransferNFT(
      _implBatchTransferNFT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setImplBidsAndAcceptOffers(
      _implBidsAndAcceptOffers: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setImplBuyEditListing(
      _implBuyEditListing: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setImplListAndComplete(
      _implListAndComplete: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxActiveOfferCountAndMinVaultVersion(
      _maxActiveOfferCount: BigNumberish,
      _minVaultVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOfferDuration(
      _minDuration: BigNumberish,
      _maxDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVarious(
      _maxRoyalty: BigNumberish,
      _maxStartTimeIncrement: BigNumberish,
      _officialNFTDiscount: string,
      _callGasLimit: BigNumberish,
      _paintRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVariousTimes(
      _auctionGracePeriodForCancelling: BigNumberish,
      _flashAuctionGracePeriodForCancelling: BigNumberish,
      _auctionEndTimeIncreaseCutOff: BigNumberish,
      _flashAuctionEndTimeIncreaseCutOff: BigNumberish,
      _minIncreasedBidPercent: BigNumberish,
      _modifyInitialStartTime: boolean,
      _modifyPostStartTime: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setimplMakeAndEditOffers(
      _implMakeAndEditOffers: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    singleNFTListings(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userAltOffersMade(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBundleOffersMade(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCollectionOffersMade(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userFilteredCollectionOffersMade(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOffersMade(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOffer(
      _offerId: BigNumberish,
      _nft: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _searchKeywords: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptOfferBatch(
      _offerIds: BigNumberish[],
      _nfts: string[],
      _tokenIdOrMarketplaceIds: BigNumberish[],
      _isMarketplaceIds: boolean[],
      _quantities: BigNumberish[],
      _searchKeywords: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptOnSaleOffer(
      _offerId: BigNumberish,
      _quantity: BigNumberish,
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSale(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _amountBatches: BigNumberish[],
      _price: BigNumberish,
      _times: BigNumberish[],
      _amount: BigNumberish,
      _flags: boolean[],
      _searchKeywords: string,
      _addresses: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSaleBatch(
      _nfts: string[][],
      _tokenIds: BigNumberish[][],
      _amountBatches: BigNumberish[][],
      _prices: BigNumberish[],
      _times: BigNumberish[][],
      _amounts: BigNumberish[],
      _flags: boolean[][],
      _searchKeywords: string[],
      _addresses: string[][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addValidVaultFactory(
      _vaultFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctionEndTimeIncreaseCutOff(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionGracePeriodForCancelling(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      _marketplaceId: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyBatch(
      _marketplaceIds: BigNumberish[],
      _amounts: BigNumberish[],
      _allowFailures: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      _offerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOfferBatch(
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSale(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSaleBatch(
      _marketplaceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeMarketplaceEntry(
      _marketplaceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentMarketplaceId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    devFeeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editOffer(
      _offerId: BigNumberish,
      _nft: string,
      _tokenId: BigNumberish,
      _newQuantity: BigNumberish,
      _newOfferPrice: BigNumberish,
      _newOfferDuration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editOfferBatch(
      _offerIds: BigNumberish[],
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _newQuantities: BigNumberish[],
      _newOfferPrices: BigNumberish[],
      _newOfferDurations: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editPrice(
      _marketplaceId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editPriceAndQuantity(
      _marketplaceId: BigNumberish,
      _newPrice: BigNumberish,
      _newQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editPriceAndQuantityBatch(
      _marketplaceId: BigNumberish[],
      _newPrices: BigNumberish[],
      _newQuantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editPriceBatch(
      _marketplaceIds: BigNumberish[],
      _prices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editQuantity(
      _marketplaceId: BigNumberish,
      _newQuantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editQuantityBatch(
      _marketplaceIds: BigNumberish[],
      _newQuantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expireOffers(
      _offerIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashAuctionEndTimeIncreaseCutOff(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashAuctionGracePeriodForCancelling(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOffer(
      _offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSaleDetails(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasExistingActiveOffers(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeAltOffer(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _quantity: BigNumberish,
      _prices: BigNumberish[],
      _duration: BigNumberish,
      _searchKeywords: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeBid(
      _marketplaceId: BigNumberish,
      _bid: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeBidBatch(
      _marketplaceIds: BigNumberish[],
      _bids: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeCollectionOffer(
      _nft: string,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      _searchKeywords: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeFilteredCollectionOffer(
      _nft: string,
      _tokenIds: BigNumberish[],
      _quantity: BigNumberish,
      _prices: BigNumberish[],
      _duration: BigNumberish,
      _searchKeywords: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeFilteredCollectionOfferBatch(
      _nfts: string[],
      _tokenIds: BigNumberish[][],
      _quantities: BigNumberish[],
      _prices: BigNumberish[][],
      _durations: BigNumberish[],
      _searchKeywords: string[][],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeOffer(
      _marketplaceId: BigNumberish,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeOfferBatch(
      _marketplaceIds: BigNumberish[],
      _quantities: BigNumberish[],
      _prices: BigNumberish[],
      _durations: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeOfferSingle(
      _nft: string,
      _tokenId: BigNumberish,
      _quantity: BigNumberish,
      _price: BigNumberish,
      _duration: BigNumberish,
      _searchKeywords: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeOfferSingleBatch(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _quantities: BigNumberish[],
      _prices: BigNumberish[],
      _durations: BigNumberish[],
      _searchKeywords: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxActiveOfferCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxOfferDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxStartTimeIncrement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minFlashAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minIncreasedBidPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minOfferDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minVaultVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextMinimumBid(
      _marketplaceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerCounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeInvalidVaultFactory(
      _vaultFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserve1(
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserve2(
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserve3(
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserve4(
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveOnlyOwner(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeNFTTransferBulk(
      _nfts: string[],
      _tokenIds: BigNumberish[],
      _tos: string[],
      _amounts: BigNumberish[],
      _chainId: BigNumberish,
      _destinations: string[],
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeNFTTransferBulkOrdered(
      _nftsInfo: BulkTransferInfoStruct[],
      _chainId: BigNumberish,
      _destination: string,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salesFeeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBundles(
      _maxBundleNumber: BigNumberish,
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDurations(
      _minDuration: BigNumberish,
      _maxDuration: BigNumberish,
      _minAuctionDuration: BigNumberish,
      _minFlashAuctionDuration: BigNumberish,
      _maxAuctionDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnableSelling(
      _enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAddresses(
      _dev: string,
      _salesFee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeePercentage(
      _feePercentage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setImplBatchTransferNFT(
      _implBatchTransferNFT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setImplBidsAndAcceptOffers(
      _implBidsAndAcceptOffers: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setImplBuyEditListing(
      _implBuyEditListing: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setImplListAndComplete(
      _implListAndComplete: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxActiveOfferCountAndMinVaultVersion(
      _maxActiveOfferCount: BigNumberish,
      _minVaultVersion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOfferDuration(
      _minDuration: BigNumberish,
      _maxDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVarious(
      _maxRoyalty: BigNumberish,
      _maxStartTimeIncrement: BigNumberish,
      _officialNFTDiscount: string,
      _callGasLimit: BigNumberish,
      _paintRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVariousTimes(
      _auctionGracePeriodForCancelling: BigNumberish,
      _flashAuctionGracePeriodForCancelling: BigNumberish,
      _auctionEndTimeIncreaseCutOff: BigNumberish,
      _flashAuctionEndTimeIncreaseCutOff: BigNumberish,
      _minIncreasedBidPercent: BigNumberish,
      _modifyInitialStartTime: boolean,
      _modifyPostStartTime: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setimplMakeAndEditOffers(
      _implMakeAndEditOffers: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    singleNFTListings(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userAltOffersMade(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userBundleOffersMade(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userCollectionOffersMade(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userFilteredCollectionOffersMade(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userOffersMade(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
